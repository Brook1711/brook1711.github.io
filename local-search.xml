<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C Primer Plus 入门 1</title>
    <link href="/2021/12/26/C-Primer-Plus-%E5%85%A5%E9%97%A8-1/"/>
    <url>/2021/12/26/C-Primer-Plus-%E5%85%A5%E9%97%A8-1/</url>
    
    <content type="html"><![CDATA[<h1 id="教材"><a href="#教材" class="headerlink" title="教材"></a>教材</h1>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>c</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>beginners</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/26/Academic-English/Academic%20English/"/>
    <url>/2021/12/26/Academic-English/Academic%20English/</url>
    
    <content type="html"><![CDATA[<h1 id="Words"><a href="#Words" class="headerlink" title="Words"></a>Words</h1><h2 id="褒义"><a href="#褒义" class="headerlink" title="褒义"></a>褒义</h2><h3 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h3><p><br/> emerged 新兴技术兴起<br><br/> &emsp; e.g. have emerged as a new paradigm for </p><p><br/> vancing 技术进步<br><br/> &emsp; e.g. From 1G to 5G, the system capacity has been significantly improved by ad vancing the transceiver design</p><p><br/> fabricated 建造<br><br/> &emsp; Particularly, an active RIS element was designed and fabricated to validate the developed signal model through experimental measurements.</p><p><br/> manipulate 操控<br><br/> &emsp; Then, by properly adjusting Θ to manipulate the N signals reflected by the N RIS elements to coherently add up with the same phase at the receiver, a high array gain proportional to N2<br>can be achieved.</p><p><br/> integrate 将某项技术融合进来<br><br/> &emsp; , the key component of an active RIS element is the additionally integrated active reflectiontype amplifier, which can be realized by many existing active components, such the current-inverting converter</p><h3 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h3><p><br/> paradigm 范例<br><br/> </p><h3 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h3><p><br/> incident 除了有名词“事件”的意思之外还有“附加的”意思，和signal组合的时候意为入射信号<br><br/> noticeable 引人注目的，可以作为good的替换词<br><br/> &emsp; we propose the concept of active RISs as a promising solution to achieve noticeable capacity gains also in typical communication scenarios.<br><br/> interdisciplinary 跨学科的<br><br/> &emsp; with the interdisciplinary development of</p><h2 id="短语"><a href="#短语" class="headerlink" title="短语"></a>短语</h2><p><br/> in a desired manner<br><br/>&emsp; Specifically, an RIS is an array composed of massive passive elements, which reflect electromagnetic signals in a desired manner so as to reconfigure the wireless environment [5].<br><br/> the key feature of<br><br/> &emsp; the key feature of active RIS is the capability of actively reflectin g signals with amplification at the expense of additional power consumption. </p><p><br/>  be realized by 通过..实现</p><h2 id="贬义"><a href="#贬义" class="headerlink" title="贬义"></a>贬义</h2><h3 id="动词-1"><a href="#动词-1" class="headerlink" title="动词"></a>动词</h3><p><br/> bypassed<br><br/>&emsp;</p><h3 id="名词-1"><a href="#名词-1" class="headerlink" title="名词"></a>名词</h3><h3 id="形容词-1"><a href="#形容词-1" class="headerlink" title="形容词"></a>形容词</h3><p><br/> atypical<br><br/> &emsp;  Most existing works on RIS have bypassed this effect by only considering atypical scenarios with very poor direct links [8]–[10], [14]– [16].</p><p><br/> negligible 微小；微不足道的<br><br/> &emsp;However, due to the <mark>“double fading” effect</mark>, RIS only achieves a <mark>negligible capacity gain</mark> in typical communication scenario</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># markdown 语法</span><br><span class="hljs-comment"># 1个&amp;emsp; = 2个&amp;ensp; = 4个&amp;nbsp;</span><br><br></code></pre></td></tr></table></figure><h1 id="句式"><a href="#句式" class="headerlink" title="句式"></a>句式</h1><h2 id="转折"><a href="#转折" class="headerlink" title="转折"></a>转折</h2><p><br/> ….(describe the drawbacks), which however has been widely ignored in many existing works.<br><br/> while 表示轻度转折<br><br/> &emsp; From 1G to 5G, the system capacity has been significantly improved by ad vancing the transceiver design, while the wireless channels have been usually considered to be uncontrollable.<br><br/> <br/> are only observed in atypical communication scenarios where 场景的局限性<br><br/>  By contrast, …<br><br/> Unfortunately</p><h2 id="提出"><a href="#提出" class="headerlink" title="提出"></a>提出</h2><p><br/> …(algrthm or novolty) is proposed to break this fundamental physical limit.</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><br/> Different from the existing passive RIS that reflects signals passively without amplification, active RIS can actively amplify the reflected signals.<br><br/>  By contrast, …</p><h2 id="并列"><a href="#并列" class="headerlink" title="并列"></a>并列</h2><p><br/> together with Then, we propose the concept of active RIS together with its hardware structure and signal model to overcome this fatal problem. </p><h2 id="解释-承接"><a href="#解释-承接" class="headerlink" title="解释/承接"></a>解释/承接</h2><p><br/>…, which is validated through experimental measurements.<br><br/>…, thus overcoming the fundamental limit of “double fading” effect.<br><br/> so as to …<br><br/>Thanks to its …, … is expected to …<br><br/>Due to …, one of the most essential benefits of …<br><br/> which characterizes ..<br><br/>  The reason for this result is<br><br/> . Consequently<br><br/> To achieve this goal,<br><br/> as a promising solution to …<br><br/> We consider to analyze the capacity gain achievable by</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p><br/>extensive results show that,<br><br/> Particularly, an active RIS element was designed and fabricated to validate the developed signal model through experimental measurements.<br><br/> Extensive results show that, </p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><br/> Over the past few decades, wireless communications have provided society with significant benefits.<br><br/> with the interdisciplinary development of<br><br/> Recently, with the interdisciplinary development of meta-materials, electromagnetics, and wireless communications, a revolutionary technique called reconfigurable intelligent surface (RIS) has been proposed [1]–[4], which offers a novel design paradigm by adding new degrees of freedom to intelligently control wireless channels for improved communications. </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/26/markdown/template-from-CSDN/"/>
    <url>/2021/12/26/markdown/template-from-CSDN/</url>
    
    <content type="html"><![CDATA[<p>@<a href="这里写自定义目录标题">TOC</a></p><h1 id="欢迎使用Markdown编辑器"><a href="#欢迎使用Markdown编辑器" class="headerlink" title="欢迎使用Markdown编辑器"></a>欢迎使用Markdown编辑器</h1><p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p><h2 id="新的改变"><a href="#新的改变" class="headerlink" title="新的改变"></a>新的改变</h2><p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p><ol><li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li><li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li><li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li><li>全新的 <strong>KaTeX数学公式</strong> 语法；</li><li>增加了支持<strong>甘特图的mermaid语法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="mermaid语法说明"><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">1</a></span></a></sup></strong> 功能；</li><li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li><li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li><li>增加了 <strong>检查列表</strong> 功能。</li></ol><h2 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h2><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd><br>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd><br>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p><h2 id="合理的创建标题，有助于目录的生成"><a href="#合理的创建标题，有助于目录的生成" class="headerlink" title="合理的创建标题，有助于目录的生成"></a>合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p><h2 id="如何改变文本的样式"><a href="#如何改变文本的样式" class="headerlink" title="如何改变文本的样式"></a>如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong></p><p>==标记文本==</p><p><del>删除文本</del></p><blockquote><p>引用文本</p></blockquote><p>H~2~O is是液体。</p><p>2^10^ 运算结果是 1024.</p><h2 id="插入链接与图片"><a href="#插入链接与图片" class="headerlink" title="插入链接与图片"></a>插入链接与图片</h2><p>链接: <a href="https://www.csdn.net/">link</a>.</p><p>图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" alt="Alt"></p><p>带尺寸的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30" alt="Alt"></p><p>居中的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" alt="Alt"></p><p>居中并且带尺寸的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30" alt="Alt"></p><p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p><h2 id="如何插入一段漂亮的代码片"><a href="#如何插入一段漂亮的代码片" class="headerlink" title="如何插入一段漂亮的代码片"></a>如何插入一段漂亮的代码片</h2><p>去<a href="https://mp.csdn.net/console/configBlog">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// An highlighted block</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br></code></pre></td></tr></table></figure></p><h2 id="生成一个适合你的列表"><a href="#生成一个适合你的列表" class="headerlink" title="生成一个适合你的列表"></a>生成一个适合你的列表</h2><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li>[ ] 计划任务</li><li>[x] 完成任务</li></ul><h2 id="创建一个表格"><a href="#创建一个表格" class="headerlink" title="创建一个表格"></a>创建一个表格</h2><p>一个简单的表格是这么创建的：<br>| 项目 | Value |<br>| —— | ——- |<br>| 电脑 | $1600 |<br>| 手机 | $12   |<br>| 导管 | $1    |</p><h3 id="设定内容居中、居左、居右"><a href="#设定内容居中、居左、居右" class="headerlink" title="设定内容居中、居左、居右"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右<br>|     第一列     |         第二列 | 第三列         |<br>| :——————: | ——————-: | :——————- |<br>| 第一列文本居中 | 第二列文本居右 | 第三列文本居左 |</p><h3 id="SmartyPants"><a href="#SmartyPants" class="headerlink" title="SmartyPants"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：<br>|    TYPE   |ASCII                          |HTML<br>|————————|———————————————-|——————————————-|<br>|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |’Isn’t this fun?’            |<br>|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |”Isn’t this fun?”            |<br>|Dashes          |<code>-- is en-dash, --- is em-dash</code>|— is en-dash, —- is em-dash|</p><h2 id="创建一个自定义列表"><a href="#创建一个自定义列表" class="headerlink" title="创建一个自定义列表"></a>创建一个自定义列表</h2><p>Markdown<br>:  Text-to-HTML conversion tool</p><p>Authors<br>:  John<br>:  Luke</p><h2 id="如何创建一个注脚"><a href="#如何创建一个注脚" class="headerlink" title="如何创建一个注脚"></a>如何创建一个注脚</h2><p>一个具有注脚的文本。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="注脚的解释"><a href="https://mermaidjs.github.io/">2</a></span></a></sup></p><h2 id="注释也是必不可少的"><a href="#注释也是必不可少的" class="headerlink" title="注释也是必不可少的"></a>注释也是必不可少的</h2><p>Markdown将文本转换为 HTML。</p><p>*[HTML]:   超文本标记语言</p><h2 id="KaTeX数学公式"><a href="#KaTeX数学公式" class="headerlink" title="KaTeX数学公式"></a>KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/">KaTeX</a>:</p><p>Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分</p><script type="math/tex; mode=display">\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.</script><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">here</a>.</p></blockquote><h2 id="新的甘特图功能，丰富你的文章"><a href="#新的甘特图功能，丰富你的文章" class="headerlink" title="新的甘特图功能，丰富你的文章"></a>新的甘特图功能，丰富你的文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">gantt<br>        dateFormat  YYYY-MM-DD<br>        title Adding GANTT diagram functionality to mermaid<br>        section 现有任务<br>        已完成               :done,    des1, 2014-01-06,2014-01-08<br>        进行中               :active,  des2, 2014-01-09, 3d<br>        计划一               :         des3, after des2, 5d<br>        计划二               :         des4, after des3, 5d<br></code></pre></td></tr></table></figure><ul><li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="UML-图表"><a href="#UML-图表" class="headerlink" title="UML 图表"></a>UML 图表</h2><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/">Mermaid</a>. 例如下面产生的一个序列图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">sequenceDiagram<br>张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?<br>李四--&gt;&gt;王五: 你最近怎么样，王五？<br>李四--x 张三: 我很好，谢谢!<br>李四-x 王五: 我很好，谢谢!<br>Note right of 王五: 李四想了很长时间, 文字太长了&lt;br&#x2F;&gt;不适合放在一行.<br><br>李四--&gt;&gt;张三: 打量着王五...<br>张三-&gt;&gt;王五: 很好... 王五, 你怎么样?<br></code></pre></td></tr></table></figure><p>这将产生一个流程图。:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph LR<br>A[长方形] -- 链接 --&gt; B((圆))<br>A --&gt; C(圆角长方形)<br>B --&gt; D&#123;菱形&#125;<br>C --&gt; D<br></code></pre></td></tr></table></figure><ul><li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="FLowchart流程图"><a href="#FLowchart流程图" class="headerlink" title="FLowchart流程图"></a>FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">flowchat<br>st&#x3D;&gt;start: 开始<br>e&#x3D;&gt;end: 结束<br>op&#x3D;&gt;operation: 我的操作<br>cond&#x3D;&gt;condition: 确认？<br><br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br></code></pre></td></tr></table></figure></p><ul><li>关于 <strong>Flowchart流程图</strong> 语法，参考 [这儿][4].</li></ul><h2 id="导出与导入"><a href="#导出与导入" class="headerlink" title="导出与导入"></a>导出与导入</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p><p>[4]: <a href="http://adrai.github.io/flowchart.js/">http://adrai.github.io/flowchart.js/</a><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://mermaidjs.github.io/">mermaid语法说明</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>注脚的解释<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/26/hello-world/"/>
    <url>/2021/12/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script type="math/tex; mode=display">lnx>1-\frac{1}{x}</script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Compressed Sensing 压缩感知</title>
    <link href="/2021/10/20/Compressed-Sensing-%E5%8E%8B%E7%BC%A9%E6%84%9F%E7%9F%A5/"/>
    <url>/2021/10/20/Compressed-Sensing-%E5%8E%8B%E7%BC%A9%E6%84%9F%E7%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Compressed-Sensing-压缩感知技术"><a href="#Compressed-Sensing-压缩感知技术" class="headerlink" title="Compressed Sensing 压缩感知技术"></a>Compressed Sensing 压缩感知技术</h1><h2 id="第一课：简介"><a href="#第一课：简介" class="headerlink" title="第一课：简介"></a>第一课：简介</h2><p>参考视频：<a href="https://www.youtube.com/watch?v=SbU1pahbbkc&amp;t=328s">https://www.youtube.com/watch?v=SbU1pahbbkc&amp;t=328s</a></p><blockquote><p>This video introduces compressed sensing, which is an exciting new branch of applied mathematics, making it possible to reconstruct full images from a random subset of the pixels.  There is a ton of beautiful math behind this concept, touching on high-dimensional geometry, robust statistics, and optimization.<br>Book Website: <a href="http://databookuw.com">http://databookuw.com</a><br>Book PDF: <a href="http://databookuw.com/databook.pdf">http://databookuw.com/databook.pdf</a><br>These lectures follow Chapter 3 from:<br>“Data-Driven Science and Engineering: Machine Learning, Dynamical Systems, and Control”  by Brunton and Kutz<br>Amazon: <a href="https://www.amazon.com/Data-Driven-Sc">https://www.amazon.com/Data-Driven-Sc</a>…<br>Brunton Website: eigensteve.com</p></blockquote><p>首先考虑有一张高清图片，上面有成千上万个像素点:<br><img src="https://raw.githubusercontent.com/Brook1711/fig_for_blog/master/img/20211020123639.png" alt="高清图片"></p><p>我们把这个图片上的像素点拉直拉成一个向量${\boldsymbol  x} \in {\mathbb R}^{M\times 1}$。这里M等于像素点的个数且维度非常大，这时传输一个图像花费的开销是非常高的，所以要对信息量进行压缩，一个有效的方式就是对${\boldsymbol y}$做DFT变换，此时会得到一个稀疏的列向量${\boldsymbol s}\in {\mathbb C}^{M\times 1}$：</p><script type="math/tex; mode=display">{\boldsymbol s}={\mathbf U}_M{\boldsymbol x}</script><p>这里的${\mathbf U}<em>M \in { \mathbb C}^{M \times M}$是一个标准的DFT矩阵：$\left[\mathbf{U}</em>{N}\right]_{n, m}=\frac{1}{\sqrt{N}} e^{-\mathrm{i} \frac{2 \pi}{N}(n-1)(m-1)}$</p><p>此时图像就变成了：</p><p><img src="https://raw.githubusercontent.com/Brook1711/fig_for_blog/master/img/20211020124545.png" alt="DFT变换之后的图像"></p><p>但是其实右边的经过DFT的图像并不是所有细节都需要，我们可以过滤掉百分之95左右的细节，但是依然可以从中恢复比较完整的图像，</p><p><img src="https://raw.githubusercontent.com/Brook1711/fig_for_blog/master/img/20211020131205.png" style="zoom:25%;" /></p><p>最后可以通过IDFT将图像回复出来</p><p><img src="https://raw.githubusercontent.com/Brook1711/fig_for_blog/master/img/20211020131307.png" style="zoom:50%;" /></p><p>注意，在整个过程中，我们利用了${\boldsymbol s}$的稀疏性减少了百分之95的传输开销，但是这不是压缩感知干的事情，压缩感知干的事情是：我们原来还是需要对超大维度对${\boldsymbol x}$进行DFT变换，其计算复杂度太高，那么可不可以在做DFT之前就把95%的冗余信息全部删去呢，也就是超低的采样进行图像冗余信息的删减：</p><p><img src="https://raw.githubusercontent.com/Brook1711/fig_for_blog/master/img/20211020131705.png" style="zoom:50%;" /></p><p>接下来我们定义一个观测（采样，measurements）矩阵${\boldsymbol y} \in {\mathbb C}^{N\times 1}$，注意到$N\ll M$ </p><script type="math/tex; mode=display">\begin{aligned}{\boldsymbol y} & = {\mathbf C} {\boldsymbol x} \\                                & = {\mathbf C} {\mathbf U}_M^H \color{red}{\boldsymbol s}\end{aligned}</script><p>现在的问题是，我可以得到观测值（采样值）${\boldsymbol y}\in {\mathbb C}^{N \times 1}$,根据${\boldsymbol y}$的值去求解${\boldsymbol s}$的值，只要我知道了${\boldsymbol s}$的值之后我就可以通过IDFT（反傅立叶变换）去得到我最终想要获取的源图像${\boldsymbol x}$ </p><p>这里需要注意一点，${\boldsymbol s}$是一个very tall 的高维度的列向量，而${\boldsymbol y}$是一个very short 的列向量，所以去求解的时候${\boldsymbol s}$有无数个解。所以之后会用一种$\text{particular sparsity promoting norm called \color{red} one norm}$。</p><h2 id="第二课：数学推导"><a href="#第二课：数学推导" class="headerlink" title="第二课：数学推导"></a>第二课：数学推导</h2><p><a href="https://www.youtube.com/watch?v=inr-nGnVc0k">Compressed Sensing: Mathematical Formulation - YouTube</a></p><blockquote><p>This video introduces the mathematical theory of compressed sensing, related to high-dimensional geometry, robust statistics, and optimization.   Book Website: <a href="https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqblE3ZG4yUjl1dHAzc2pVSlZheTh3T0N0WHpNd3xBQ3Jtc0tucXR0dHd4NkxpZDUyelFZX1FPd0N4SGlKOE9qLVVYTy1ZYnhIOVdGNWs0ZnZMTUNYQWFPZ3BpcmZfS2F5LUlyWWpJc2FDaXhiV0dtWVBwaEFJa096OGhxVDllZ2Q3SEY4MzBCMUplNWlGa1FmMFRvZw&amp;q=http%3A%2F%2Fdatabookuw.com">http://databookuw.com</a>  Book PDF: <a href="https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbDFaOHI0LVN4LW5YX1hqOEhUeVhvRGZQVkk0Z3xBQ3Jtc0tuZHowSGIzNkRiQ0E2RkNZWFJrNC1OY3pqSFFUNGtFNElRTm4xOGpCTldFbkQzV0xLazFwRVVUc0tDdVVxelRxbXMxUzJWSmtqcm51bEFWLUd6YWVuYnhqTlg3T1I2YmhDWDRXU1AxeUVGa3dUUjhkdw&amp;q=http%3A%2F%2Fdatabookuw.com%2Fdatabook.pdf">http://databookuw.com/databook.pdf</a> These lectures follow Chapter 3 from: “Data-Driven Science and Engineering: Machine Learning, Dynamical Systems, and Control”  by Brunton and Kutz Amazon: <a href="https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbkJmY2lxdEpDSUVWQmRjWVdaV3Z6aGxRWWhSZ3xBQ3Jtc0tuUVBKc3Y1VEFNMllSbjk5OXZ3V1l5T3J4ZWNheWpOUFFoWUhTU3RIMENpNWZaRzBZMWd4VmpVSnBCRElfbmE4S1lPQTI3NS1CZkM1UVNlcDBDcjR1bjZDRWNxdlRiYlBBVmFCNHpHOVZtUXBKY19pRQ&amp;q=https%3A%2F%2Fwww.amazon.com%2FData-Driven-Science-Engineering-Learning-Dynamical%2Fdp%2F1108422098%2F">https://www.amazon.com/Data-Driven-Sc…</a> Brunton Website: eigensteve.com</p></blockquote><p><img src="https://raw.githubusercontent.com/Brook1711/fig_for_blog/master/img/20211020143405.png" alt=""></p><script type="math/tex; mode=display">\begin{aligned}{\boldsymbol y} & = {\mathbf C} {\boldsymbol x} \\                                & = {\mathbf C} {\mathbf U}_M^H \color{red}{\boldsymbol s}\end{aligned}</script><p>Underdetermined inverse problem : 知道了$\boldsymbol y$，去求解${\boldsymbol s}$ 但是${\boldsymbol s}$ 的维度要远远大于${\boldsymbol y}$ ，所以理论上${\boldsymbol s}$有无数个解</p><p>这个问题是$\text { combinatorial hard problem }$ ,关键问题是你如何在这么多${\boldsymbol s}$中找到稀疏的${\boldsymbol s}$。经历了十五年的概率学发展之后，人门可以通过一些算法来找到包含0元素最多的${\boldsymbol s}$。即 $\color{red}\text{find the sparsest s which satisfies the above equition} $</p><p><img src="https://raw.githubusercontent.com/Brook1711/fig_for_blog/master/img/20211020145130.png" alt="">可以看到，第一项$||{\mathbf C}{\mathbf \Psi}{\boldsymbol s }-{\boldsymbol y} ||_2 $表示普通的方程求解，第二项则$\lambda||{\boldsymbol s} ||_1$表示了最小化$\boldsymbol s$ 的一范数，这样做可以使其最后稀疏</p><p>该优化</p><script type="math/tex; mode=display">\min_{\boldsymbol s} \left\|{\mathbf C} {\mathbf \Psi} {\boldsymbol s}-y\right\|_{2}+\lambda\|\boldsymbol s\|_{1}</script><p>是一个convex optimization 这意味着其计算复杂度是可以接受的</p><p>同时，我们真正想知道的是：</p><script type="math/tex; mode=display">\min_{\boldsymbol s} \left\|{\mathbf C} {\mathbf \Psi} {\boldsymbol s}-y\right\|_{2}+\lambda\|\boldsymbol s\|_{0}</script><p>但是，这就不是一个凸优化问题了，这在计算机里面并不可解，但是在2000年左右，有人提出令1范数代替0范数，最终的解大概率会趋近于我们想要的稀疏的${\boldsymbol s}$</p><p>也可以写成另一种形式：</p><p><img src="https://raw.githubusercontent.com/Brook1711/fig_for_blog/master/img/20211020150211.png" alt=""></p><p>但是有些时候存在测量噪声，所以经常不会使限制完全等于0:</p><p><img src="https://raw.githubusercontent.com/Brook1711/fig_for_blog/master/img/20211020150336.png" alt=""></p><h2 id="第三课：工作条件"><a href="#第三课：工作条件" class="headerlink" title="第三课：工作条件"></a>第三课：工作条件</h2><p><a href="https://www.youtube.com/watch?v=hmBTACBGWJs">Compressed Sensing: When It Works - YouTube</a></p><blockquote><p>This video provides conditions on when compressed sensing will work to reconstruct a full image from a random subsample of pixels.  Book Website: <a href="https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbjVSN0tGRzR4YThMaERCZlNLTkV3Rk5pSGZ1Z3xBQ3Jtc0trUUxGcGRQUnNUaTd4ZVZ2dEdfMFRCOEJLTi1wS21oVHU0TlY5cFdhdWF4VjdRdTQwS3R0QzB6ZzZYRFppdDhJSFFBcmc4ZUE3V2djZENJbzM4b1NZUWJhZXhYRlg2M0hmWXNJdTl2MXNsa0JMcFRGSQ&amp;q=http%3A%2F%2Fdatabookuw.com">http://databookuw.com</a>  Book PDF: <a href="https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbTBqZ2xuQWk1a0JwUU9sOE1DVzVsMU5fQkhMUXxBQ3Jtc0tuV2RnOUkxcU5feUJsX2E1R3pCRnpHYUE0ZkhZRlBRTTNPNXVxNUFxSFJSOTEydXF3UjU3X21zbEctQ2RBVTV6cE5KM3duNlhaelJEVmdRWWxBek5FbnBfOEk0QXRpZ29OUVprbWZ1bEZuVzNDOE1Scw&amp;q=http%3A%2F%2Fdatabookuw.com%2Fdatabook.pdf">http://databookuw.com/databook.pdf</a> These lectures follow Chapter 3 from: “Data-Driven Science and Engineering: Machine Learning, Dynamical Systems, and Control”  by Brunton and Kutz Amazon: <a href="https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqazUydkpLOTUyMHI5LWlTYTYxWGZScXo0ajlEUXxBQ3Jtc0tsQjQtSjFySi1KaHZDbGpqOWQ3LXFveUpaVVlsNlgwT2FfYjNNVFBGX2pHOG9EMUFHVlFIUXN5ZGMwemp5cmZJUUVKdDJjb183b1M4cHlGVGcyNm1Pa0tSVDV3V09DUXRkY2paaTA2OE9NMmlzdldTcw&amp;q=https%3A%2F%2Fwww.amazon.com%2FData-Driven-Science-Engineering-Learning-Dynamical%2Fdp%2F1108422098%2F">https://www.amazon.com/Data-Driven-Sc…</a> Brunton Website: eigensteve.com</p></blockquote><p>First condition: Incoherence</p><p>矩阵${\mathbf C}$中的每一行必须和${\mathbf \Psi}$中的所有列非正交，或者不能相对于${\mathbf \Psi}$中的任何一列过于平行</p><p><img src="https://raw.githubusercontent.com/Brook1711/fig_for_blog/master/img/20211020154535.png" alt=""></p><p>高斯分布、伯努利分布等等</p>]]></content>
    
    
    <categories>
      
      <category>paper</category>
      
      <category>math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>Algorithm</tag>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EM Algorithm 期望最大化算法</title>
    <link href="/2021/10/15/EM-Algrithm-%E6%9C%9F%E6%9C%9B%E6%9C%80%E5%A4%A7%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    <url>/2021/10/15/EM-Algrithm-%E6%9C%9F%E6%9C%9B%E6%9C%80%E5%A4%A7%E5%8C%96%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>paper</category>
      
      <category>math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>Algorithm</tag>
      
      <tag>EM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>active RIS  文献调研 1</title>
    <link href="/2021/05/10/RIS/RIS-active-1/"/>
    <url>/2021/05/10/RIS/RIS-active-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Active-RIS-vs-Passive-RIS-Which-Will-Prevail-in-6G"><a href="#Active-RIS-vs-Passive-RIS-Which-Will-Prevail-in-6G" class="headerlink" title="Active RIS vs. Passive RIS: Which Will Prevail in 6G?"></a>Active RIS vs. Passive RIS: Which Will Prevail in 6G?</h1><p><a href="https://arxiv.org/pdf/2103.15154.pdf">https://arxiv.org/pdf/2103.15154.pdf</a><br>阅读目的：其中提到了反射元对幅度的增幅模型，即，（activate RIS）</p><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><blockquote><p>From 1G to 5G, wireless channels have been traditionally considered to be uncontrollable. Thanks to the recent advances in meta-materials, reconfigurable intelligent surfaces (RISs) <mark>have emerged as a new paradigm</mark> for controlling wireless channels intelligently, thus making it a revolutionary technique for future 6G wireless communications. However, due to the <mark>“double fading” effect</mark>, RIS only achieves a <mark>negligible capacity gain</mark> in typical communication scenarios, which however has been widely ignored in many existing works. In this paper, the concept of active RIS is proposed to break this fundamental physical limit. Different from the existing passive RIS that reflects signals passively without amplification, active RIS can actively amplify the reflected signals. We then develop a signal model for active RIS, which is validated through experimental measurements. Based on this new signal model, we analyze the capacity gain  chievable by active RIS and formulate the capacity maximization problem in an active RIS aided system. Next, a joint transmit and reflect precoding algorithm is proposed to solve this problem. Finally, extensive results show that, compared with the baseline without RIS, the existing passive RIS can realize a negligible capacity gain of only 3% in typical application scenarios, while the proposed active RIS can achieve a noticeable capacity gain of 129%, thus overcoming the fundamental limit of “double fading” effect.<br><br/>“双衰落”导致RIS的辅助增益极低</p></blockquote><p>从1G到5G，传统观点上认为无线信道是不可以控制的。但是由于最近超材料（meta-material）的发展，可重构智能表面（RIS）已经成为智能控制无线信道的新范例，从而使其成为未来6G无线通信的革命性技术。 但是，由于“双重衰落”效应，RIS在典型的通信情况下只能实现微不足道的容量增益，但是在许多现有工作中却被广泛忽略。 在这篇文章中，提出了主动RIS的概念以打破这一基本物理限制。和现有的只是被动的反射信号不同，主动RIS可以主动增幅反射信号。我们随之建立了主动RIS的信号模型，该模型通过实验测量已经被证实。基于这种新的信号模型，我们分析了有源RIS可实现的容量增益，并提出了有源RIS辅助系统中的容量最大化问题。接下来，提出了一种联合发射和反射的预编码算法来解决这个问题。最后，广泛的结果表明，与不使用RIS的基线相比，现有的被动RIS在典型应用方案中只能实现3％的可忽略不计的容量增长，而建议的主动RIS可以实现129％的显着容量增长，因此可以克服 “双重衰落”效应的根本极限。</p><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><blockquote><p>Over the past few decades, wireless communications have provided society with significant benefits. From 1G to 5G, the system capacity has been significantly improved by advancing the transceiver design, while the wireless channels have been usually considered to be uncontrollable. Recently, with the interdisciplinary development of meta-materials, electromagnetics, and wireless communications, a revolutionary technique called reconfigurable intelligent surface (RIS) has been proposed [1]–[4], which offers a novel design paradigm by adding new degrees of freedom to intelligently control wireless channels for improved communications. Specifically, an RIS is an array composed of massive passive elements, which reflect electromagnetic signals in a desired manner so as to reconfigure the wireless environment [5]. Thanks to its high array gain, low cost, low power, and <mark>low noise</mark> [5]– [7], RIS is expected to improve channel capacity [8], extend coverage [9], and reduce power consumption [10] for future 6G communications. Additionally, RISs are projected to have other applications such as in WiFi [11], precision measurement [12], and navigation [13].<br><br/><mark>低噪声的特性之前没有见过</mark></p></blockquote><p>在过去的几十年中，无线通信为社会带来了巨大的进步。 从1G到5G，先进的收发器设计大大提高了系统容量，而通常认为无线通道是不可控制的。近年来，随着超材料，电磁学和无线通信的跨学科发展，提出了一种革命性的技术，称为可重构智能表面（RIS）[1] – [4]，它通过增加新的自由度提供了一种新颖的设计范例。 智能控制无线信道以改善通信。具体地说，RIS是由大量无源元件组成的阵列，这些元件以所需的方式反射电磁信号，从而重新配置无线环境。由于其高阵列增益，低成本，低功耗和低噪声[5] – [7]，RIS有望在未来6G通信中提高信道容量[8]，扩展覆盖范围[9]和降低功耗[10]。此外，RIS预计将有望在其他场景中得到应用，例如WiFi [11]，精度测量[12]和导航[13]。</p><blockquote><p>Due to the negligible noise introduced by passive RISs, one of the most essential benefits of RISs is the <mark>“square law” array gain</mark>. In particular, the array gain of an $N$-element RIS is proportional to $N^2$ , which is N times larger than that achievable by the standard massive multiple-input multiple output (MIMO) [5]. Benefiting from this advantage, RIS is expected to bring significant capacity gains in future 6G wireless networks. <mark>However, actually significant capacity gains are only observed in atypical communication scenarios where the direct link from the transmitter to the receiver is completely blocked or very weak [8]–[10], [14]–[16].</mark> By contrast, in the typical scenario where the direct link is not weak, the common RISs with hundreds of passive elements can only achieve negligible capacity gains [17]. The reason behind this phenomenon is the “double fading” effect introduced by RIS, i.e., the signals received via the reflection link <mark>suffer from large-scale fading twice</mark>. Particularly, the equivalent path loss of the transmitter RIS-receiver link is the product (instead of the summation) of the path losses of the transmitter-RIS link and RIS-receiver link, which is usually thousands of times larger than that of the direct link [17]. As a result, the “double fading” effect makes it almost impossible for passive RIS to achieve a noticeable capacity gain in typical wireless environment. Most existing works on RIS have bypassed this effect by only considering atypical scenarios with very poor direct links [8]–[10], [14]– [16]. Therefore, to advance the practicability of RIS for future 6G wireless networks, a critical issue must to be addressed is: How to overcome the fundamental limit of “double fading” effect of RIS?<br><br/> RIS的特性——<mark>“平方律增益”</mark>（square law）</p></blockquote><p>由于无源RIS引入的噪声可忽略不计，所以RIS的最基本好处之一就是“平方律”阵列增益。特别是，N元素RIS的阵列增益与N 2成正比，这比标准大规模多输入多输出（MIMO）可获得的阵列增益大N倍[5]。受益于此优势，RIS有望在未来的6G无线网络中带来巨大的容量增长。但是，实际上只有在非典型的通信场景中才能观察到显着的容量增益，其中从发射机到接收机的直接链路被完全阻塞或非常弱[8] – [10]，[14] – [16]。相比之下，在直接链路不弱的典型情况下，具有数百个无源元件的普通RIS只能获得微不足道的容量增益[17]。这种现象背后的原因是RIS引入的“双重衰落”效应，即通过反射链路接收的信号两次遭受大规模衰落。特别是，发射机RIS-接收机链路的等效路径损耗是发射机-RIS链路和RIS-接收机链路的路径损耗的乘积（而不是总和），通常比直接链路的路径损耗大数千倍。链接[17]。结果，“双衰落”效应使得无源RIS在典型的无线环境中几乎不可能获得明显的容量增益。现有的大多数关于RIS的著作都只考虑了具有非常差的直接联系的非典型场景[8]-[10]，[14]-[16]，从而绕过了这种影响。因此，要提高RIS在未来6G无线网络中的实用性，必须解决的关键问题是：如何克服RIS的“双重衰落”效应的基本限制？</p><blockquote><p>To break the fundamental physical limit of the “double fading” effect, the new concept of active RIS is proposed in this paper. Specifically, our contributions are summarized as follows:<br><br/>• We propose the concept of active RIS to overcome the “double fading” effect in typical communication scenarios. Different from the existing passive RIS that just passively reflects signals without amplification, the key feature of active RIS is the capability of actively reflectin g signals with amplification at the expense of additional power consumption.<br><br/>• We develop a new signal model for the proposed active RIS, which characterizes how the incident signal is amplified and how <mark>non-negligible thermal noise</mark> is introduced at the active elements. Particularly, an active RIS element was designed and fabricated to validate the developed signal model through experimental measurements.<br><br/>• Based on the proposed signal model, we analyze the capacity gain achievable by active RISs and formulate a capacity maximization problem in an active RIS aided MIMO system. Then, a joint transmit and reflect precoding algorithm is proposed to solve this problem. Extensive results show that, in a typical communication scenario, the existing passive RIS only achieves a negligible ca pacity gain of 3%, while the proposed active RIS is able to achieve a noticeable capacity gain of 129%, thus overcoming the fundamental limit of “double fading” effect.<br><br/>在主动RIS中考虑了热噪声</p></blockquote><p>为了打破“双衰落”效应的基本物理极限，本文提出了有源RIS的新概念。具体来说，我们的贡献总结如下：<br><br/>•我们提出了主动RIS的概念，以克服典型通信场景中的“双衰落”效应。不同于现有的被动RIS只是被动地反射信号而不进行放大，主动RIS的关键特征是能够通过放大来主动反射信号，但要付出额外的功耗。<br><br/>•我们为拟议的有源RIS开发了一个新的信号模型，该模型描述了入射信号如何放大以及如何在有源元件处引入不可忽略的热噪声。特别是，设计并制造了有源RIS元件，以通过实验测量来验证开发的信号模型。<br><br/>•基于提出的信号模型，我们分析了有源RIS可获得的容量增益，并提出了有源RIS辅助MIMO系统中的容量最大化问题。然后，提出了一种联合发射和反射的预编码算法来解决这个问题。广泛的结果表明，在典型的通信场景中，现有的被动RIS只能实现3％的可忽略不计的容量增益，而建议的主动RIS能够实现129％的显着容量增益，从而克服了“双重衰落”效果。</p><blockquote><p>The rest of this paper is organized as follows. In Section II, the concept of active RIS is introduced and its impact on channel capacity is analyzed. Then, the proposed joint precoding design for capacity maximization is provided in Section III. In Section IV, the results of experimental measurements and numerical simulations are presented. Finally, conclusions are drawn and future works are discussed in Section V. Notations: C and R+ denote the sets of complex and positive real numbers, respectively; [·] −1 , [·] T , and [·] H denote the inverse, transpose, and conjugate-transpose operations, respectively; k· k denotes the Euclidean norm of its argument; diag(·) denotes diagonal operation; R{·} denotes the real part of its argument; ⊗ denotes the Kronecker product; ∠[·] denotes the angle of its complex argument; ln(·) denotes the natural logarithm of its argument; CN (µ, Σ) denotes the complex multivariate Gaussian distribution with mean µ and variance Σ; IL is an L × L identity matrix, and 0L is an L × 1 zero vecto</p></blockquote><h1 id="可借鉴的点"><a href="#可借鉴的点" class="headerlink" title="可借鉴的点"></a>可借鉴的点</h1><h2 id="对于传统RIS“double-fading”的阐述"><a href="#对于传统RIS“double-fading”的阐述" class="headerlink" title="对于传统RIS“double fading”的阐述"></a>对于传统RIS“double fading”的阐述</h2><blockquote><p> However, due to the <mark>“double fading” effect</mark>, RIS only achieves a <mark>negligible capacity gain</mark> in typical communication scenarios, which however has been widely ignored in many existing works.</p><p><mark>However, actually significant capacity gains are only observed in atypical communication scenarios where the direct link from the transmitter to the receiver is completely blocked or very weak [8]–[10], [14]–[16].</mark> By contrast, in the typical scenario where the direct link is not weak, the common RISs with hundreds of passive elements can only achieve negligible capacity gains [17]. The reason behind this phenomenon is the “double fading” effect introduced by RIS, i.e., the signals received via the reflection link <mark>suffer from large-scale fading twice</mark>. Particularly, the equivalent path loss of the transmitter RIS-receiver link is the product (instead of the summation) of the path losses of the transmitter-RIS link and RIS-receiver link, which is usually thousands of times larger than that of the direct link [17]. As a result, the “double fading” effect makes it almost impossible for passive RIS to achieve a noticeable capacity gain in typical wireless environment. </p></blockquote><h2 id="关于平方律增益“square-law-array-gain”的叙述"><a href="#关于平方律增益“square-law-array-gain”的叙述" class="headerlink" title="关于平方律增益“square law array gain”的叙述"></a>关于平方律增益“square law array gain”的叙述</h2><blockquote><p>Due to the negligible noise introduced by passive RISs, one of the most essential benefits of RISs is the <mark>“square law” array gain</mark>.</p></blockquote><h2 id="传统RIS大规模反射器件造成的问题的阐述"><a href="#传统RIS大规模反射器件造成的问题的阐述" class="headerlink" title="传统RIS大规模反射器件造成的问题的阐述"></a>传统RIS大规模反射器件造成的问题的阐述</h2><blockquote><p>Due to the high overhead of N pilots for channel estimation [20] and the high complexity of O(N2 ) for real-time beamforming [21], such a large number of RIS elements makes the application of passive RIS in practical wireless networks almost impossible [17]. Consequently, most existing works have bypassed the “double fading” effect by only considering the atypical scenario where the direct link is completely blocked or very weak [5]–[10], [14]–[16].</p></blockquote><h2 id="active-RIS的硬件实现方法："><a href="#active-RIS的硬件实现方法：" class="headerlink" title="active RIS的硬件实现方法："></a>active RIS的硬件实现方法：</h2><blockquote><p>To achieve this goal, the key component of an active RIS element is the additionally integrated active reflection type amplifier, which can be realized by many existing active components, such the current-inverting converter [22],the asymmetric current mirror [23], or even some integrated chips [24].</p></blockquote><h2 id="与RF-RIS和FD-AF-delay的不同"><a href="#与RF-RIS和FD-AF-delay的不同" class="headerlink" title="与RF-RIS和FD-AF delay的不同"></a>与RF-RIS和FD-AF delay的不同</h2><blockquote><p>It should be noted that, the proposed active RIS is fundamentally different from the RIS equipped with active radio frequency (RF) components [25], [26]. Specifically, some passive RIS elements are connected to additional active RF chains, which are used for baseband signal processing. In this way, these RIS elements are enabled to have the signal processing capabilities [25], [26]. On the contrary, the proposed active RIS has no these capabilities, which only reflects and amplifies the incident signal to strengthen the reflection link. Besides, although the proposed active RIS can amplify the incident signal, which is similar to the full-duplex amplify-and-forward (FD-AF) relay, their hardware structures and transmission models are actually quite different. Specifically, FD-AF relay is equipped with RF chains to receive the incident signal and then transmit it after amplification [27]. Due to the long delay of this process, it takes two time slots to complete the transmission of a symbol, and the received signal at the receiver in a time slot actually carries two different symbols, which are transmitted by the transmitter and the FD-AF relay, respectively [27]. Thus, FD-AF has two different transmission models in two adjacent time slots [27, Eq. (22), Eq. (25)], while the proposed active RIS has only one transmission model (3) in every time slot.</p></blockquote><h2 id="activate-RIS的基本信号模型"><a href="#activate-RIS的基本信号模型" class="headerlink" title="activate RIS的基本信号模型"></a>activate RIS的基本信号模型</h2><blockquote><p>With the reflection-type amplifier supported by a power supply, the reflected and amplified signal of an N-element active RIS can be modeled as follows:</p></blockquote><script type="math/tex; mode=display">\mathbf{y}=\underbrace{\mathbf{P} \boldsymbol{\Theta} \mathbf{x}}_{\text {Desired signals }}+\underbrace{\mathbf{P \Theta} \mathbf{v}}_{\text {Dynamic noise }}+\underbrace{\mathbf{n}_{\mathrm{s}}}_{\text {Static noise }},</script><p>where $x\in \mathbb{C}^N$ denotes the incident signal, $\Theta \triangleq \operatorname{diag}\left(e^{j \theta<em>{1}}, \cdots, e^{j \theta</em>{N}}\right) \in \mathbb{C}^{N \times N}$ denotes the phase shift matrix of the RIS, $\mathbf{y} \in \mathbb{C}^N$ denotes the signal reflected by the RIS, $\mathbf{P} \triangleq \operatorname{diag}\left(p<em>{1}, \cdots, p</em>{N}\right) \in \mathbb{R}<em>{+}^{N \times N}$, wherein each element can be larger than one thanks to the integrated active amplifier. Due to the use of active components, active RISs consume additional power to amplify the reflected signals, and the thermal noise introduced by active RIS elements cannot be ignored as is done for passive RIS.  Particularly, as shown in (2), the introduced noises can be divided into dynamic noise and static noise [23]. Specifically, $\mathbf{v}$ is related to the input noise and noise factor of the active RIS elements [23], while the static noise $\mathbf{n}</em>\text{s}$ is unrelated to $\mathbf{P}$ and is usually negligible compared with the dynamic noise $\mathbf{P} \Theta \mathbf{v}$ [23]. Without loss of generality, here we assume $\mathbf{v} \sim \mathcal{C} \mathcal{N}\left(\mathbf{0}<em>{N}, \sigma</em>{v}^{2} \mathbf{I}_{N}\right)$<br><br/> &emsp;Then, we consider an active RIS aided multiple-input multiple-output (MIMO) system, where an $M$-antenna base station (BS) simultaneously serve $K$ single-antenna users with the aid of an $N$-element active RIS. Therefore, according to (2), the signal $r_k \in \mathbb{C}$ received at user $k$ can be modeled as</p><script type="math/tex; mode=display">r_{k}=(\underbrace{\mathbf{h}_{k}^{H}}_{\text {Direct link }}+\underbrace{\mathbf{f}_{k}^{H} \mathbf{P} \boldsymbol{\Theta} \mathbf{G}}_{\text {Reflection link }}) \sum_{j=1}^{K} \mathbf{w}_{j} s_{j}+\underbrace{\mathbf{f}_{k}^{H} \mathbf{P} \mathbf{\Theta} \mathbf{v}}_{\text {Noises introduced at active RIS }}+\underbrace{z_{k}}_{\text {Noise introduced at user } k}</script><p>where $\mathbf{s} \triangleq\left[s<em>{1}, \cdots, s</em>{K}\right]^{T} \in \mathbb{C}^{K}$ denote the transmitted symbols for $K$ users with normalized power; $G \in \mathbb{C}^{N\times M}$, $\mathbf{h}<em>{k}^{H} \in \mathbb{C}^{1 \times M}$, and $\mathbf{f}</em>{k}^{H} \in \mathbb{C}^{1 \times N}$ denote the channels from BS to RIS, from BS to user $k$, and from RIS to user $k$, respectively; $\mathbf{w}<em>{k} \in \mathbb{C}^{M \times 1}$ denotes the BS beamforming vector for $s_k$; $z_k$ denotes the additive white Gaussion noise (AWGN) at the user and here we assume $z</em>{k} \sim \mathcal{C} \mathcal{N}\left(0, \sigma^{2}\right)$.</p><h2 id="SISO-场景的activate-RIS"><a href="#SISO-场景的activate-RIS" class="headerlink" title="SISO 场景的activate RIS"></a>SISO 场景的activate RIS</h2><blockquote><p>We consider to analyze the capacity gain achievable by active RIS by studying the user’s achievable SNR in a simple SISO scenario. To focus on the capacity gain provided by the active RIS aided reflection link, <mark>we ignore the direct link by setting $\mathbf{h}<em>{k} \triangleq 0$ [28]. For simplicity, we assume that every active RIS element has the same amplification factor ($p</em>{n} \triangleq p,\forall n \in{1, \cdots, N}$)</mark>, and redefine G , g = [g1, · · · , gN ] T , fk , f = [f1, · · · , fN ] T , and wk , w. Then, according to (3), the maximization of the user’s SNR γ subject to the power constraints at the BS and active RIS can be formulated as follows</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>paper</category>
      
      <category>RIS</category>
      
      <category>active RIS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>IEEE</tag>
      
      <tag>latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wow Academic English</title>
    <link href="/2021/04/18/Wow-Academic-English/"/>
    <url>/2021/04/18/Wow-Academic-English/</url>
    
    <content type="html"><![CDATA[<p>（持续更新）</p><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p>google translation <a href="https://translate.google.com/">https://translate.google.com/</a></p><p>lingle <a href="https://linggle.com/help/">Linggle - Language Reference Search Engines - NLPLab</a></p><blockquote><p><strong>Compare words 比较两个词汇</strong></p><ul><li><a href="https://linggle.com/?q=it is a%2Fan apple">it is a/an apple</a></li><li><a href="https://linggle.com/?q=receive%2Faccept education">receive/accept education</a></li><li><a href="https://linggle.com/?q=I come%2Fcame from%2Ffor%2Fto school">I come/came from/for/to school</a></li></ul><p><strong>0 ~ many characters 多字母替换</strong></p><p>Any length of characters.</p><p>Examples:</p><ul><li><a href="https://linggle.com/?q=what are you %24ing">what are you $ing</a></li><li><a href="https://linggle.com/?q=I am a w%24n">I am a w$n</a></li><li><a href="https://linggle.com/?q=I love %24melon">I love $melon</a></li></ul><p><strong>1 word 下划线代替单个词汇</strong></p><p>Any single word.</p><p>Examples:</p><ul><li><a href="https://linggle.com/?q=she is _">she is _</a></li><li><a href="https://linggle.com/?q=are you _ well">are you _ well</a></li><li><a href="https://linggle.com/?q=he _ a _ man">he <em> a </em> man</a></li></ul><p><strong>0 ~ many words 替换单个或多个词</strong></p><p>Any number of words.</p><p>Examples:</p><ul><li><a href="https://linggle.com/?q=do you *">do you *</a></li><li><a href="https://linggle.com/?q=* so hot">* so hot</a></li><li><a href="https://linggle.com/?q=is * me">is * me</a></li></ul><p><strong>synonyms 同义词</strong></p><p>Any words with the same meaning.</p><p>Examples:</p><ul><li><a href="https://linggle.com/?q=I am ~happy">I am ~happy</a></li><li><a href="https://linggle.com/?q=I finished my ~homework">I finished my ~homework</a></li><li><a href="https://linggle.com/?q=~take a photo">~take a photo</a></li></ul><p><strong>Optional 是否提出该词</strong></p><p>Return results with/without the word.</p><p>Examples:</p><ul><li><a href="https://linggle.com/?q=discuss %3Fabout the issue">discuss ?about the issue</a></li><li><a href="https://linggle.com/?q=what %3Fis the problem">what ?is the problem</a></li><li><a href="https://linggle.com/?q=I %3Fam come from n.">I ?am come from n.</a></li></ul></blockquote><p>易搜塔（清华） <a href="http://www.esoda.org/">易搜搭 ESODA</a></p><p>柯林辞典 <a href="https://www.collinsdictionary.com/">https://www.collinsdictionary.com/</a>  </p><h1 id="Words"><a href="#Words" class="headerlink" title="Words"></a>Words</h1><h1 id="Sentence"><a href="#Sentence" class="headerlink" title="Sentence"></a>Sentence</h1><h1 id="Special-vocabulary"><a href="#Special-vocabulary" class="headerlink" title="Special vocabulary"></a>Special vocabulary</h1><p>罗马数字 Roman numerals</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ALT</span>+<span class="hljs-number">73</span> – I; <br><span class="hljs-attribute">ALT</span>+<span class="hljs-number">86</span> – V; <br><span class="hljs-attribute">ALT</span>+<span class="hljs-number">88</span> – X;<br></code></pre></td></tr></table></figure><h1 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h1><ul><li><p>感谢您的评论</p></li><li><ul><li>Thanks for your comment.</li></ul></li><li><p>在蓝体字之前修改的说明</p></li><li><ul><li>According to your comment, we have made a further elaboration on the xxx in Sec. II. C, on page 9, which is given as follows</li><li>Accordingly, to highlight our amendment, we have further added explanations in the abstract as</li><li>The corresponding details are given in Sec. IV. D on page 22, which is as follows</li><li>has been added in Sec. V, on page 24, which is detailed as follows:</li><li>Accordingly, we have highlighted this in Sec. IV. D, on Page 22, which is given as follows:</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>paper</category>
      
      <category>academic English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>IEEE</tag>
      
      <tag>latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021 主题班会</title>
    <link href="/2021/03/19/2021-%E4%B8%BB%E9%A2%98%E7%8F%AD%E4%BC%9A/"/>
    <url>/2021/03/19/2021-%E4%B8%BB%E9%A2%98%E7%8F%AD%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/1920px-China_Youth_League_logo.svg.png" alt="China Youth League logo.svg"></p><h1 id="2017211119团支部线上主题团日活动：“学习贯彻党代会，继往开来谱新篇”"><a href="#2017211119团支部线上主题团日活动：“学习贯彻党代会，继往开来谱新篇”" class="headerlink" title="2017211119团支部线上主题团日活动：“学习贯彻党代会，继往开来谱新篇”"></a>2017211119团支部线上主题团日活动：“学习贯彻党代会，继往开来谱新篇”</h1><p>2020年12月30日至31日，中国共产党北京邮电大学第十五次代表大会顺利召开。为深入学习宣传贯彻我校第十五次党代会精神，把广大青年团员的思想和行动统一到党代会精神上来，把智慧和力量凝聚到完成党代会确定的各项目标任务上来，以优异的成绩迎接建党100周年。经校团委研究决定，拟在全校团员青年中开展“学习贯彻党代会，继往开来谱新篇”主题团日活动<img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/61616152583_.pic.jpg" alt="61616152583_.pic"><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/101616152614_.pic_hd.jpg" alt="101616152614_.pic_hd"></p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/111616152614_.pic_hd.jpg" alt="111616152614_.pic_hd"></p><p>参会人员基本到齐，活动效果良好。</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
      <category>meeting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>class</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sum-Rate Maximization for IRS-Assisted UAV OFDMA Communication Systems</title>
    <link href="/2021/03/18/Sum-Rate-Maximization-for-IRS-Assisted-UAV-OFDMA-Communication-Systems/"/>
    <url>/2021/03/18/Sum-Rate-Maximization-for-IRS-Assisted-UAV-OFDMA-Communication-Systems/</url>
    
    <content type="html"><![CDATA[<h1 id="RIS-UAV-1-Sum-Rate-Maximization-for-IRS-Assisted-UAV-OFDMA-Communication-Systems"><a href="#RIS-UAV-1-Sum-Rate-Maximization-for-IRS-Assisted-UAV-OFDMA-Communication-Systems" class="headerlink" title="[RIS UAV-1] Sum-Rate Maximization for IRS-Assisted UAV OFDMA Communication Systems"></a>[RIS UAV-1] Sum-Rate Maximization for IRS-Assisted UAV OFDMA Communication Systems</h1><div class="table-container"><table><thead><tr><th>标题</th><th>Sum-Rate Maximization for IRS-Assisted UAV OFDMA Communication Systems</th></tr></thead><tbody><tr><td>作者</td><td>Zhiqiang Wei, Yuanxin Cai, Zhuo Sun, Derrick Wing Kwan Ng, Jinhong Yuan, Mingyu Zhou, and Lixin Sun</td></tr><tr><td>期刊</td><td>Transactions on Wireless Communications</td></tr><tr><td>时间</td><td>2020 Dec</td></tr><tr><td>亮点</td><td></td></tr><tr><td>未考虑</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210318152711429.png" alt="image-20210318152711429"></p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210318152815754.png" alt="image-20210318152815754"></p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210318152749412.png" alt="image-20210318152749412"></p><p>来源：<a href="https://www.aminer.cn/search/pub?k=Sum-Rate%20Maximization%20for%20IRS-Assisted%20UAV%20OFDMA%20Communic&amp;q=Sum-Rate%20Maximization%20for%20IRS-Assisted%20UAV%20OFDMA%20Communic&amp;t=b">https://www.aminer.cn/search/pub?k=Sum-Rate%20Maximization%20for%20IRS-Assisted%20UAV%20OFDMA%20Communic&amp;q=Sum-Rate%20Maximization%20for%20IRS-Assisted%20UAV%20OFDMA%20Communic&amp;t=b</a></p><h2 id="动机："><a href="#动机：" class="headerlink" title="动机："></a>动机：</h2><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><hr><h3 id="Abstract："><a href="#Abstract：" class="headerlink" title="Abstract："></a>Abstract：</h3><p>在OFDMA（正交多址接入）的UAV系统中应用IRS</p><p><strong>利用了：</strong></p><ol><li><p>IRS带来的波束增益</p></li><li><p>UAV的高移动性</p></li></ol><p><strong>控制优化变量：</strong></p><ol><li>UAV trajectory</li><li>IRS scheduling</li><li>communication resource allocation</li></ol><p><strong>优化目的：</strong></p><p>​    在满足多样化的QoS条件的情况下最大化系统和速率</p><p>RIS的出现在UAV到用户的组合信道中引入了频率和空间选择性。</p><p><strong>使用了：</strong></p><p>​    交替优化（alternating optimization，AO）</p><hr><h2 id="贡献："><a href="#贡献：" class="headerlink" title="贡献："></a>贡献：</h2><h2 id="词汇："><a href="#词汇：" class="headerlink" title="词汇："></a>词汇：</h2><p>heterogeneous 各种各样的</p><p>derive the expression of 首先写出表达式</p>]]></content>
    
    
    <categories>
      
      <category>paper</category>
      
      <category>read</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>IEEE</tag>
      
      <tag>IRS</tag>
      
      <tag>RIS</tag>
      
      <tag>UAV</tag>
      
      <tag>OFDMA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于donkey car的RC小玩具</title>
    <link href="/2021/03/04/%E5%9F%BA%E4%BA%8Edonkey-car%E7%9A%84RC%E5%B0%8F%E7%8E%A9%E5%85%B7/"/>
    <url>/2021/03/04/%E5%9F%BA%E4%BA%8Edonkey-car%E7%9A%84RC%E5%B0%8F%E7%8E%A9%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="基于donkey-car的RC小玩具"><a href="#基于donkey-car的RC小玩具" class="headerlink" title="基于donkey car的RC小玩具"></a>基于donkey car的RC小玩具</h1><p>由raspberry pi zero w 运行python脚本，基于web端远程控制的RC玩具</p><p>donkeycar<a href="http://docs.donkeycar.com/">官网</a></p><h2 id="1、树莓派准备"><a href="#1、树莓派准备" class="headerlink" title="1、树莓派准备"></a>1、树莓派准备</h2><p>根据官网<a href="http://docs.donkeycar.com/guide/robot_sbc/setup_raspberry_pi/">指引</a></p><p>首先开启摄像头：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo raspi-<span class="hljs-built_in">config</span><br></code></pre></td></tr></table></figure><p>进入系统设置后</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210304202512847.png" alt="image-20210304202512847"></p><p>选择启用以下功能</p><ul><li>enable <code>Interfacing Options</code> - <code>I2C</code></li><li>enable <code>Interfacing Options</code> - <code>Camera</code></li></ul><p>选择重启树莓派：</p><p>安装依赖：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-get install build-essential python<span class="hljs-number">3</span> python<span class="hljs-number">3</span>-dev python<span class="hljs-number">3</span>-pip python<span class="hljs-number">3</span>-virtualenv python<span class="hljs-number">3</span>-numpy python<span class="hljs-number">3</span>-picamera python<span class="hljs-number">3</span>-pandas python<span class="hljs-number">3</span>-rpi.gpio i<span class="hljs-number">2</span>c-tools avahi-utils joystick libopenjp<span class="hljs-number">2</span>-<span class="hljs-number">7</span>-dev libtiff<span class="hljs-number">5</span>-dev gfortran libatlas-base-dev libopenblas-dev libhdf<span class="hljs-number">5</span>-serial-dev git ntp<br></code></pre></td></tr></table></figure><p>这一步比较耗时，建议换源。</p><p>选择性，注意，不推荐安装（opencv）</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install libilmbase-<span class="hljs-built_in">dev</span> libopenexr-<span class="hljs-built_in">dev</span> libgstreamer1<span class="hljs-number">.0</span>-<span class="hljs-built_in">dev</span> libjasper-<span class="hljs-built_in">dev</span> libwebp-<span class="hljs-built_in">dev</span> libatlas-base-<span class="hljs-built_in">dev</span> libavcodec-<span class="hljs-built_in">dev</span> libavformat-<span class="hljs-built_in">dev</span> libswscale-<span class="hljs-built_in">dev</span> libqtgui4 libqt4-test<br><br></code></pre></td></tr></table></figure><p>接下来官网推荐建立python虚拟环境</p><blockquote><p>Step 10: Setup Virtual Env</p><p>This needs to be done only once:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -m virtualenv -p python3 env --system-site-packages<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source env/bin/activate&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><blockquote><p>Modifying your <code>.bashrc</code> in this way will automatically enable this </p></blockquote><p>这里直接在默认环境下运行。</p><p>新建<code>demo</code>文件夹，在该文件夹下从donkey car项目地址拉取项目代码：</p><ul><li>Create and change to a directory you would like to use as the head of your projects.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir demo<br><span class="hljs-built_in">cd</span> demo<br></code></pre></td></tr></table></figure><ul><li>Get the latest donkeycar from Github.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/autorope/donkeycar<br><span class="hljs-built_in">cd</span> donkeycar<br>git checkout master<br>pip install -e .[pi]<br>pip install numpy --upgrade<br>wget <span class="hljs-string">&quot;https://raw.githubusercontent.com/PINTO0309/Tensorflow-bin/master/tensorflow-2.3.1-cp37-none-linux_armv7l_download.sh&quot;</span><br>chmod u+x tensorflow-2.3.1-cp37-none-linux_armv7l_download.sh<br>tensorflow-2.3.1-cp37-none-linux_armv7l_download.sh<br>pip install tensorflow-2.3.1-cp37-none-linux_armv7l.whl<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>playing</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>donkey car</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode刷题（2021.3.2）</title>
    <link href="/2021/03/02/leetcode%E5%88%B7%E9%A2%98%EF%BC%882021-3-2%EF%BC%89/"/>
    <url>/2021/03/02/leetcode%E5%88%B7%E9%A2%98%EF%BC%882021-3-2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><h2 id="原题："><a href="#原题：" class="headerlink" title="原题："></a>原题：</h2><p>题目地址： <a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">重复字符的最长子串</a></p><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p>示例 1:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;abcabcbb&quot;</span><br><span class="hljs-section">输出: 3 </span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;bbbbb&quot;</span><br><span class="hljs-section">输出: 1</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></code></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;pwwkew&quot;</span><br><span class="hljs-section">输出: 3</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br>     请注意，你的答案必须是 子串 的长度，<span class="hljs-string">&quot;pwke&quot;</span> 是一个子序列，不是子串。<br></code></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;&quot;</span><br><span class="hljs-section">输出: 0</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>原文<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/zhi-zeng-da-bu-jian-xiao-de-hua-dong-chuang-kou-10/">地址</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>start,end := <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br><span class="hljs-comment">//start和end是开头和结尾两个信标，每一次循环查找信标内是否含有s[i]</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br><span class="hljs-comment">//这里的循环妙就妙在不是围绕着start和end两个自由度，</span><br><span class="hljs-comment">//而是遍历i是否破坏了&quot;单个字符不重复&quot;的条件</span><br><span class="hljs-comment">//第i位元素表示即将被纳入start和end之中的预备军</span><br>index := strings.Index(s[start:i],<span class="hljs-keyword">string</span>(s[i]))<br><span class="hljs-keyword">if</span> index==<span class="hljs-number">-1</span>&#123;<br><span class="hljs-comment">//当index==-1时，表示第i位元素不会破坏信标内（只有信标的[start:i]部分）</span><br><span class="hljs-comment">//的&quot;单个字符不重复&quot;的条件</span><br><span class="hljs-comment">//如果想要拓展必须保证[start:end]内都没有重复字符</span><br><span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span>&gt;end&#123;<br>end=i+<span class="hljs-number">1</span><br><span class="hljs-comment">//此时如果i==end也能表示[start:end]内都没有重复字符</span><br><span class="hljs-comment">//此时可以将end进行拓展</span><br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//这里表示第i位元素和start到i之间（不包含第i位）的第index位（以start为0）</span><br><span class="hljs-comment">//在这种情况下将窗口整体移动到第index+1位，跳过重复元素</span><br>start+=index+<span class="hljs-number">1</span><br>end+=index+<span class="hljs-number">1</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//另一个比较巧妙的地方是，由于窗口只增不减，最后当循环结束时end-start就是最后的结果</span><br><span class="hljs-keyword">return</span> end-start<br>&#125;<br></code></pre></td></tr></table></figure><p><code>strings.Index</code>的<a href="https://golang.org/pkg/strings/#Index">官方解释</a></p><blockquote><p>Index returns the index of the first instance of substr in s, or -1 if substr is not present in s.</p></blockquote><p>关于切片：</p><blockquote><p>s := “abc”</p><p>s[1:2]为“b”，可以概括为“左闭右开”。</p></blockquote><h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><p>原题：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">寻找两个正序数组的中位数</a></p><p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p><p>示例 1：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1,3]</span>, nums2 = <span class="hljs-comment">[2]</span><br>输出：2.00000<br>解释：合并数组 = <span class="hljs-comment">[1,2,3]</span> ，中位数 2<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：<span class="hljs-symbol">nums1</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], <span class="hljs-symbol">nums2</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>输出：<span class="hljs-number">2.50000</span><br>解释：合并数组 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>] ，中位数 <span class="hljs-comment">(2 + 3)</span> / <span class="hljs-number">2</span> = <span class="hljs-number">2.5</span><br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：<span class="hljs-symbol">nums1</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], <span class="hljs-symbol">nums2</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>输出：<span class="hljs-number">0.00000</span><br></code></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：<span class="hljs-symbol">nums1</span> = [], <span class="hljs-symbol">nums2</span> = [<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">1.00000</span><br></code></pre></td></tr></table></figure><p>示例 5：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：<span class="hljs-symbol">nums1</span> = [<span class="hljs-number">2</span>], <span class="hljs-symbol">nums2</span> = []<br>输出：<span class="hljs-number">2.00000</span><br></code></pre></td></tr></table></figure><p>提示：</p><p>nums1.length == m<br>nums2.length == n<br>0 &lt;= m &lt;= 1000<br>0 &lt;= n &lt;= 1000<br>1 &lt;= m + n &lt;= 2000<br>-106 &lt;= nums1[i], nums2[i] &lt;= 106</p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114/">原文地址</a></p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>leetcode</category>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode-cn</tag>
      
      <tag>algrithom</tag>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pi-zero学习4: pi dashboard</title>
    <link href="/2021/02/27/pi-zero%E5%AD%A6%E4%B9%A04-pi-dashboard/"/>
    <url>/2021/02/27/pi-zero%E5%AD%A6%E4%B9%A04-pi-dashboard/</url>
    
    <content type="html"><![CDATA[<h1 id="pi-zero学习4-pi-dashboard"><a href="#pi-zero学习4-pi-dashboard" class="headerlink" title="pi-zero学习4: pi dashboard"></a>pi-zero学习4: pi dashboard</h1><p>实时监控树莓派的网页</p><p>项目地址：</p><p><a href="https://github.com/spoonysonny/pi-dashboard">https://github.com/spoonysonny/pi-dashboard</a></p><h2 id="1、安装lnmp"><a href="#1、安装lnmp" class="headerlink" title="1、安装lnmp"></a>1、安装lnmp</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>安装Nginx，输入下面的命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install -y nginx<br></code></pre></td></tr></table></figure><p>完全卸载：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-builtin-name">get</span> --purge <span class="hljs-builtin-name">remove</span> nginx<br>$ sudo apt-<span class="hljs-builtin-name">get</span> autoremove<br>$ dpkg --get-selections | grep nginx<br><br>$ sudo apt-<span class="hljs-builtin-name">get</span> --purge <span class="hljs-builtin-name">remove</span> nginx-common<br>$ sudo apt-<span class="hljs-builtin-name">get</span> install nginx<br></code></pre></td></tr></table></figure><p>启动nginx服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service nginx restart</span><br></code></pre></td></tr></table></figure><p>安装PHP7.0，(删去版本号)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-get install -y nginx php<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-fpm php<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-cli php<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-curl php<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-gd php<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-mcrypt php<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-cgi php<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-mysql php<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-mbstring<br><br></code></pre></td></tr></table></figure><blockquote><p>The following additional packages will be installed:<br>libltdl7 libmcrypt4 libsodium23 php-common php7.1-common php7.3-cgi php7.3-cli php7.3-common php7.3-curl php7.3-fpm php7.3-gd php7.3-json<br>php7.3-mysql php7.3-opcache php7.3-readline</p></blockquote><p>安装完毕后启动php7.0服务</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> service php<span class="hljs-number">7</span>.<span class="hljs-number">3</span>-fpm restart<br></code></pre></td></tr></table></figure><p>安装MySQL（MariaDb），输入下面的命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sudo apt-get <span class="hljs-keyword">install</span> -y mysql-<span class="hljs-keyword">server</span> mysql-<span class="hljs-keyword">client</span> <br></code></pre></td></tr></table></figure><blockquote><p>Reading package lists… Done<br>Building dependency tree<br>Reading state information… Done<br>Package mysql-client is not available, but is referred to by another package.<br>This may mean that the package is missing, has been obsoleted, or<br>is only available from another source<br>However the following packages replace it:<br>mariadb-client-10.0</p><p>Package mysql-server is not available, but is referred to by another package.<br>This may mean that the package is missing, has been obsoleted, or<br>is only available from another source<br>However the following packages replace it:<br>  mariadb-server-10.0</p></blockquote><p>更换安装命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-get install -y mariadb-client-<span class="hljs-number">10</span>.<span class="hljs-number">0</span> mariadb-server-<span class="hljs-number">10</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>安装完毕后启动mysql服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service mysql restart</span><br></code></pre></td></tr></table></figure><p>如果安装成功，可通过 http:// 树莓派IP 访问到 Nginx 的默认页。Nginx 的根目录在 /var/www/html。</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210227111607009.png" alt="image-20210227111607009">到这里，就已经安装完毕了，下面就开始配置Nginx+PHP7+MySQL(MariaDB)了。</p><p>配置见<a href="https://blog.csdn.net/alinathz/article/details/92234300">https://blog.csdn.net/alinathz/article/details/92234300</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/spoonysonny/</span>pi-dashboard.git<br><br><br></code></pre></td></tr></table></figure><p>进入目录</p><p>接着配置nginx</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/vhost<br>vim dashboard.conf<br></code></pre></td></tr></table></figure><p>将其中的如下内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">location / &#123;<br>                <span class="hljs-comment"># First attempt to serve request as file, then</span><br>                <span class="hljs-comment"># as directory, then fall back to displaying a 404.</span><br>                try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =<span class="hljs-number">404</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p>替换为</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">location</span> / &#123;<br><span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm <span class="hljs-keyword">index</span>.php <span class="hljs-keyword">default</span>.html <span class="hljs-keyword">default</span>.htm <span class="hljs-keyword">default</span>.php;<br>&#125;<br> <br><span class="hljs-keyword">location</span> ~\.php$ &#123;<br>fastcgi_pass unix:/run/php/php7<span class="hljs-number">.3</span>-fpm.sock;<br><span class="hljs-meta">#fastcgi_pass 127.0.0.1:9000;</span><br>fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;<br>include fastcgi_params;<br>&#125;<br></code></pre></td></tr></table></figure><p>Ctrl + O 保存再 Ctrl + X 退出。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service nginx restart</span><br></code></pre></td></tr></table></figure><p>执行 <code>mysql</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">MariaDB [(none)]&gt; use mysql;<br>MariaDB [mysql]&gt; update user <span class="hljs-built_in">set</span> plugin=<span class="hljs-string">&#x27;mysql_native_password&#x27;</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>MariaDB [mysql]&gt; UPDATE user SET password=PASSWORD(<span class="hljs-string">&#x27;你想要设定的密码&#x27;</span>) WHERE user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>MariaDB [mysql]&gt; flush privileges;<br>MariaDB [mysql]&gt; <span class="hljs-built_in">exit</span>;<br></code></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service mysql restart<br></code></pre></td></tr></table></figure><p>部署pi dashboard：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html<br>sudo git <span class="hljs-built_in">clone</span> https://github.com/nxez/pi-dashboard.git<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210227125420430.png" alt="image-20210227125420430"></p><p>树莓派ip可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping raspberrypi.local<br></code></pre></td></tr></table></figure><p>得知</p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>pi zero</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pi_zero</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pi-zero学习3: 呼吸灯控制</title>
    <link href="/2021/02/27/pi-zero%E5%AD%A6%E4%B9%A03-%E5%91%BC%E5%90%B8%E7%81%AF%E6%8E%A7%E5%88%B6/"/>
    <url>/2021/02/27/pi-zero%E5%AD%A6%E4%B9%A03-%E5%91%BC%E5%90%B8%E7%81%AF%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="pi-zero学习3-呼吸灯控制"><a href="#pi-zero学习3-呼吸灯控制" class="headerlink" title="pi-zero学习3: 呼吸灯控制"></a>pi-zero学习3: 呼吸灯控制</h1><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> RPi.GPIO <span class="hljs-keyword">as</span> GPIO        <span class="hljs-comment"># 引入GPIO模块      </span><br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep              <span class="hljs-comment"># 引入time模块</span><br>      <br>LedPin = <span class="hljs-number">19</span>    <span class="hljs-comment"># 引脚定义 （后面用）</span><br>freq =<span class="hljs-number">100</span>        <span class="hljs-comment"># 存放PWM频率变量，这里初始值为100，可以根据实际需要修改                </span><br>dc = <span class="hljs-number">0</span>              <span class="hljs-comment"># 存放PWM占空比变量，这里初始值为0，可以根据实际需要修改              </span><br><br>GPIO.setmode(GPIO.BCM)            <span class="hljs-comment"># 使用BCM编号方式        </span><br>GPIO.setup(LedPin, GPIO.OUT)    <span class="hljs-comment"># 将GPIO19设置为输出模式    </span><br><br>pwm = GPIO.PWM(LedPin, freq)     <span class="hljs-comment"># 创建PWM对象，并指定初始频率</span><br>pwm.start(dc)                                   <span class="hljs-comment"># 启动PWM，并指定初始占空比</span><br><br>freq = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please input the frequency of PWM(1-2000Hz): &quot;</span>))   <span class="hljs-comment"># 等待输入新PWM频率</span><br>pwm.ChangeFrequency(freq)        <span class="hljs-comment"># 改变PWM频率</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:                                    <span class="hljs-comment"># 循环</span><br>     <span class="hljs-keyword">if</span> dc ==<span class="hljs-number">0</span>:                               <span class="hljs-comment">#如果占空比为0时</span><br>         <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>                dc = dc+<span class="hljs-number">1</span>                   <span class="hljs-comment">#占空比自加</span><br>                sleep(<span class="hljs-number">0.01</span>)                <span class="hljs-comment">#占空比一0.01s的速度自加</span><br>                pwm.ChangeDutyCycle(dc)  <span class="hljs-comment">#灯现实逐渐变亮</span><br>                <span class="hljs-keyword">if</span> dc ==<span class="hljs-number">100</span>:<br>                     <span class="hljs-keyword">break</span>                 如果占空比加到一百时跳出循环体<br>     <span class="hljs-keyword">if</span> dc == <span class="hljs-number">100</span>:      <span class="hljs-comment">#与上面相反</span><br>         <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>                dc = dc-<span class="hljs-number">1</span><br>                sleep(<span class="hljs-number">0.01</span>)<br>                pwm.ChangeDutyCycle(dc) <br>                <span class="hljs-keyword">if</span> dc == <span class="hljs-number">0</span>:<br>                     <span class="hljs-keyword">break</span><br>                     <br><span class="hljs-built_in">input</span>()                    <br>GPIO.cleanup()    <span class="hljs-comment"># 清理释放GPIO资源，将GPIO复位</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>pi zero</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pi_zero</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pi-zero学习2: 空心杯驱动</title>
    <link href="/2021/02/26/pi-zero%E5%AD%A6%E4%B9%A02-%E7%A9%BA%E5%BF%83%E6%9D%AF%E9%A9%B1%E5%8A%A8/"/>
    <url>/2021/02/26/pi-zero%E5%AD%A6%E4%B9%A02-%E7%A9%BA%E5%BF%83%E6%9D%AF%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="pi-zero学习2-空心杯驱动"><a href="#pi-zero学习2-空心杯驱动" class="headerlink" title="pi-zero学习2: 空心杯驱动"></a>pi-zero学习2: 空心杯驱动</h1><h2 id="1、port-map"><a href="#1、port-map" class="headerlink" title="1、port map"></a>1、port map</h2><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/PiZerov2.png" alt="Getting Started with the Raspberry Pi Zero Wireless - learn.sparkfun.com"></p><p>打算采用pwm输入电调进行空心杯控驱动。</p><h2 id="2、设备清单"><a href="#2、设备清单" class="headerlink" title="2、设备清单"></a>2、设备清单</h2><h3 id="2-1、电调"><a href="#2-1、电调" class="headerlink" title="2.1、电调"></a>2.1、电调</h3><p>6A单向有刷电调1S 3.7V</p><p>购买链接：</p><blockquote><p>4.0微CAy8cyVtpcZ啊 <a href="https://m.tb.cn/h.4lma220?sm=661059">https://m.tb.cn/h.4lma220?sm=661059</a>  旋风航模型6A有刷电调1S 3.7V空心杯1020电机2g舵机小型DIY固定翼</p></blockquote><h3 id="2-2、电池"><a href="#2-2、电池" class="headerlink" title="2.2、电池"></a>2.2、电池</h3><p>1S 600 毫安时</p><h3 id="2-3、电机"><a href="#2-3、电机" class="headerlink" title="2.3、电机"></a>2.3、电机</h3><p>1020 空心杯</p><h3 id="2-4、桨叶"><a href="#2-4、桨叶" class="headerlink" title="2.4、桨叶"></a>2.4、桨叶</h3><p>R75mm</p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>pi zero</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pi_zero</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pi zero学习1：入门</title>
    <link href="/2021/02/26/pi-zero%E5%AD%A6%E4%B9%A01%EF%BC%9A%E5%85%A5%E9%97%A8-1/"/>
    <url>/2021/02/26/pi-zero%E5%AD%A6%E4%B9%A01%EF%BC%9A%E5%85%A5%E9%97%A8-1/</url>
    
    <content type="html"><![CDATA[<h1 id="pi-zero学习1：入门"><a href="#pi-zero学习1：入门" class="headerlink" title="pi zero学习1：入门"></a>pi zero学习1：入门</h1><p>官网教程地址：</p><p><a href="https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up">https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up</a></p><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><img src="https://projects-static.raspberrypi.org/projects/raspberry-pi-setting-up/05f98c4cac11e7fc2ead84db91ff9f49dc23176c/en/images/pi-plug-in.gif" alt="plug in the pi"></p><p>这里的教程是针对树莓派4的板子，但是应该是与pi zero兼容。</p><p>具体参数如下</p><p><strong>Technical Specifications</strong></p><p>The Raspberry Pi Zero W extends the Pi Zero family. Launched at the end of February 2017, the Pi Zero W has all the functionality of the original Pi Zero, but comes with added connectivity, consisting of:</p><ul><li>802.11 b/g/n wireless LAN</li><li>Bluetooth 4.1</li><li>Bluetooth Low Energy (BLE)</li></ul><p>Like the Pi Zero, it also has:</p><ul><li>1GHz, single-core CPU</li><li>512MB RAM</li><li>Mini HDMI and USB On-The-Go ports</li><li>Micro USB power</li><li>HAT-compatible 40-pin header</li><li>Composite video and reset headers</li><li>CSI camera connector</li></ul><h2 id="2、使用SD卡启动"><a href="#2、使用SD卡启动" class="headerlink" title="2、使用SD卡启动"></a>2、使用SD卡启动</h2><h3 id="Raspberry-Pi-Imager"><a href="#Raspberry-Pi-Imager" class="headerlink" title="Raspberry Pi Imager"></a>Raspberry Pi Imager</h3><p>树莓派团队开发了一款可以下载并自动安装景象到sd卡的软件，该软件可以在win、mac、linux平台上运行，其下载地位：</p><p><a href="https://www.raspberrypi.org/downloads/">https://www.raspberrypi.org/downloads/</a></p><p>选择适合自己的操作系统</p><p><a href="https://www.raspberrypi.org/software/operating-systems/">https://www.raspberrypi.org/software/operating-systems/</a></p><p>这里我选择的是Raspberry Pi OS Lite，就是不带桌面而且不带推荐软件，是最小系统。</p><p>打开刚才准备的Raspberry Pi Imager：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210226103914138.png" alt="image-20210226103914138"></p><p>选择要烧录的镜像（就是刚刚下载的Raspberry Pi OS Lite）选择要烧录的sd卡，点击write按钮。</p><h2 id="3、ssh连接"><a href="#3、ssh连接" class="headerlink" title="3、ssh连接"></a>3、ssh连接</h2><h3 id="使用wifi-ssh链接"><a href="#使用wifi-ssh链接" class="headerlink" title="使用wifi+ssh链接"></a>使用wifi+ssh链接</h3><p>在SD卡中新建文件，命名为wpa_supplicant.conf，输入如下内容并保存。</p><p>在SD卡中新建文件，命名为ssh，内容为空。</p><h3 id="使用usb连接线连结"><a href="#使用usb连接线连结" class="headerlink" title="使用usb连接线连结"></a>使用usb连接线连结</h3><p><a href="https://gist.github.com/superdodd/06b91ba03899e47beb43078b27dc601e">https://gist.github.com/superdodd/06b91ba03899e47beb43078b27dc601e</a></p><h2 id="4、网络配置"><a href="#4、网络配置" class="headerlink" title="4、网络配置"></a>4、网络配置</h2><p><a href="https://gist.github.com/superdodd/06b91ba03899e47beb43078b27dc601e">https://gist.github.com/superdodd/06b91ba03899e47beb43078b27dc601e</a></p><p>在进行配置之前需要开启root登陆</p><p>首先设置密码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo passwd root</span><br></code></pre></td></tr></table></figure><p>启用 root 账号</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo passwd <span class="hljs-comment">--unlock root </span><br></code></pre></td></tr></table></figure><p>启用 root 账号登录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo nano <span class="hljs-regexp">/etc/</span>ssh/sshd_config<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#PermitRootLogin prohibit-password</span><br>PermitRootLogin yes<br></code></pre></td></tr></table></figure><p>Ctrl + W 快捷键<br>搜索 PermitRootLogin prohibit-password<br>改为PermitRootLogin yes 并删掉#号<br>或者直接新建一行。</p><p>Ctrl + O 快捷键 保存</p><p>Ctrl + X 快捷键 退出 Nano 编辑器</p><p>这里使用usb连接ssh，编辑<code>/etc/network/interfaces</code>，添加以下内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">allow</span></span>-hotplug usb<span class="hljs-number">0</span><br><span class="hljs-attribute">iface</span> usb<span class="hljs-number">0</span> inet static<br>    <span class="hljs-attribute">address</span> <span class="hljs-number">192.168.2.2</span><br>    <span class="hljs-attribute">netmask</span> <span class="hljs-number">255.255.255.0</span><br>    <span class="hljs-attribute">gateway</span> <span class="hljs-number">192.168.2.1</span><br></code></pre></td></tr></table></figure><h2 id="5、换源"><a href="#5、换源" class="headerlink" title="5、换源"></a>5、换源</h2><p>1、首先编辑 /etc/apt/sources.list 文件，没装vim之前，推荐用 nano 命令编辑。在修改之前先把源列表备份，然后再修改sources.list。命令如下：[mw_shl_code=bash,true]cp /etc/apt/sources.list /etc/apt/sources.list.bak  #备份为 sources.list.bak<br>nano /etc/apt/sources.list    #编辑sources.list 文件[/mw_shl_code]<br>进入编辑界面，删除原有的内容或者用#注释掉原来的源，添加下方的源：<br>[mw_shl_code=bash,true]#deb <a href="http://mirrordirector.raspbian.org/raspbian/">http://mirrordirector.raspbian.org/raspbian/</a> jessie main contrib non-free rpi<br># Uncomment line below then ‘apt-get update’ to enable ‘apt-get source’<br>#deb-src <a href="http://archive.raspbian.org/raspbian/">http://archive.raspbian.org/raspbian/</a> jessie main contrib non-free rpi<br>deb <a href="http://mirrors.aliyun.com/raspbian/raspbian/">http://mirrors.aliyun.com/raspbian/raspbian/</a> jessie main contrib non-free rpi<br>deb-src <a href="http://mirrors.aliyun.com/raspbian/raspbian/">http://mirrors.aliyun.com/raspbian/raspbian/</a> jessie main contrib non-free rpi[/mw_shl_code]<br>或其他源<br>[mw_shl_code=bash,true]#大连东软信息学院(北方用户)<br>#deb <a href="http://mirrors.neusoft.edu.cn/raspbian/raspbian/">http://mirrors.neusoft.edu.cn/raspbian/raspbian/</a> wheezy main contrib non-free rpi<br>#deb-src <a href="http://mirrors.neusoft.edu.cn/raspbian/raspbian/">http://mirrors.neusoft.edu.cn/raspbian/raspbian/</a> wheezy main contrib non-free rpi<br>#中国科学技术大学<br>#deb <a href="http://mirrors.ustc.edu.cn/raspbian/raspbian/">http://mirrors.ustc.edu.cn/raspbian/raspbian/</a> wheezy main contrib non-free rpi<br>#deb-src <a href="http://mirrors.ustc.edu.cn/raspbian/raspbian/">http://mirrors.ustc.edu.cn/raspbian/raspbian/</a> wheezy main contrib non-free rpi<br>#清华大学<br>#deb <a href="http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/">http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</a> wheezy main contrib non-free rpi<br>#deb-src <a href="http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/">http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</a> wheezy main contrib non-free rpi<br>#重庆大学(中西部用户)<br>#deb <a href="http://mirrors.cqu.edu.cn/raspbian/raspbian/">http://mirrors.cqu.edu.cn/raspbian/raspbian/</a> wheezy main contrib non-free rpi<br>#deb-src <a href="http://mirrors.cqu.edu.cn/raspbian/raspbian/">http://mirrors.cqu.edu.cn/raspbian/raspbian/</a> wheezy main contrib non-free rpi[/mw_shl_code]<br>注意：镜像区别jessie或wheezy版本，软件源也对应一样。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/raspbian/</span>raspbian/ buster main contrib non-free rpi<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/raspbian/</span>raspbian/ buster main contrib non-free rpi<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo nano <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>raspi.list<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/archive.raspberrypi.org/</span>debian/ stretch main ui<br><span class="hljs-comment"># Uncomment line below then &#x27;apt-get update&#x27; to enable &#x27;apt-get source&#x27;</span><br><span class="hljs-comment">#deb-src http://archive.raspberrypi.org/debian/ stretch main ui</span><br><br></code></pre></td></tr></table></figure><h2 id="6、备份"><a href="#6、备份" class="headerlink" title="6、备份"></a>6、备份</h2><p>查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查询盘符</span><br>diskutil list <br><span class="hljs-comment"># 下面图片中的dev/disk2既对应的树莓派的TF卡</span><br></code></pre></td></tr></table></figure><p>dd命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#使用dd进行备份，同时使用gzip将备份文件进行压缩</span><br>sudo dd <span class="hljs-keyword">if</span>=/dev/disk4 bs=1m | gzip &gt; ~/demo/pi_zero/back_wlan.gz<br><span class="hljs-comment">#将“/dev/rdiskx ”改成您 Micro SD 卡的所在位置， if 參數是指定資料來源 (也就是 Micro #SD 卡)   of 則是指定備份影像檔的儲存路徑與檔案名稱 </span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo diskutil unmount /dev/disk4s1<br><br>gzip -dc ./backupImage-pi-dashboard.gz | sudo dd of=/dev/disk4 bs=1m<br></code></pre></td></tr></table></figure><h2 id="7、pip安装"><a href="#7、pip安装" class="headerlink" title="7、pip安装"></a>7、pip安装</h2><p>1.首先安装setuptools</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install -y python-pip  <br>sudo apt-<span class="hljs-builtin-name">get</span> install -y python3-pip  <br></code></pre></td></tr></table></figure><p>2.换源</p><p>~/.pip/pip.conf</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">[<span class="hljs-keyword">global</span>]<br><span class="hljs-built_in">index</span>-url = http<span class="hljs-variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/simple<br></code></pre></td></tr></table></figure><h2 id="8、配置远程桌面"><a href="#8、配置远程桌面" class="headerlink" title="8、配置远程桌面"></a>8、配置远程桌面</h2><p>在终端输入以下命令进入配置界面。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo raspi-<span class="hljs-built_in">config</span><br></code></pre></td></tr></table></figure><p>依次操作：Interfacing Options -&gt; VNC -&gt; Yes。之后系统会提示你是否要安装 VNC 服务，输入 y 之后回车，等待系统自动下载安装完成，一切顺利的话 VNC 服务就启动了！</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210227180642490.png" alt="image-20210227180642490"></p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210227180727613.png" alt="image-20210227180727613"></p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210227180744653.png" alt="image-20210227180744653"></p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210227201453435.png" alt="image-20210227201453435"></p><p>输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vncserver</span><br></code></pre></td></tr></table></figure><p>下载vnc viewer</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210227201422979.png" alt="image-20210227201422979"></p><p>框内输入树莓派ip地址即可连接</p><h2 id="9、ip固定"><a href="#9、ip固定" class="headerlink" title="9、ip固定"></a>9、ip固定</h2><p>若不进行ip固定，则很有可能电脑将其判定为MITM攻击，编辑电脑~/.ssh/known_hosts文件，删除重复host</p><p>在树莓派上：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo nano <span class="hljs-regexp">/etc/</span>network/interfaces<br></code></pre></td></tr></table></figure><p>在最后一行加入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">allow</span></span>-hotplug usb<span class="hljs-number">0</span><br><span class="hljs-attribute">iface</span> usb<span class="hljs-number">0</span> inet static<br>    <span class="hljs-attribute">address</span> <span class="hljs-number">192.168.2.2</span><br>    <span class="hljs-attribute">netmask</span> <span class="hljs-number">255.255.255.0</span><br>    <span class="hljs-attribute">gateway</span> <span class="hljs-number">192.168.2.1</span><br></code></pre></td></tr></table></figure><p>在<code>/etc/resolvconf.conf</code>中编辑：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">nameservers</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">2.1</span><br></code></pre></td></tr></table></figure><p>configure the RNDIS/Ethernet Gadget interface with the following parameters: - Configure IPV4: <code>Manually</code> - IP Address: <code>192.168.2.1</code> - Subnet Mask: <code>255.255.255.0</code> - Router: (none) - Under Advanced -&gt; DNS, add your favorite DNS server, like <code>8.8.8.8</code> or your home router.</p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>pi zero</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pi_zero</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在阿里云上的高校计划（白嫖计划）</title>
    <link href="/2021/02/24/%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E7%9A%84%E9%AB%98%E6%A0%A1%E8%AE%A1%E5%88%92%EF%BC%88%E7%99%BD%E5%AB%96%E8%AE%A1%E5%88%92%EF%BC%89/"/>
    <url>/2021/02/24/%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E7%9A%84%E9%AB%98%E6%A0%A1%E8%AE%A1%E5%88%92%EF%BC%88%E7%99%BD%E5%AB%96%E8%AE%A1%E5%88%92%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="在阿里云上的高校计划（白嫖计划）部署beego"><a href="#在阿里云上的高校计划（白嫖计划）部署beego" class="headerlink" title="在阿里云上的高校计划（白嫖计划）部署beego"></a>在阿里云上的高校计划（白嫖计划）部署beego</h1><p>阿里云高校计划地址</p><p><a href="https://developer.aliyun.com/adc/student/">https://developer.aliyun.com/adc/student/</a></p><p>首先需要进行实名认证和学生认证</p><p>和别家不同的是，阿里云的学生服务器在到期前一个月可以通过学习课程免费续费。</p><p>接下来在服务器上部署一个简单的beego项目</p><h2 id="1、登陆服务器"><a href="#1、登陆服务器" class="headerlink" title="1、登陆服务器"></a>1、登陆服务器</h2><p>过程略</p><h2 id="2、配置golang环境"><a href="#2、配置golang环境" class="headerlink" title="2、配置golang环境"></a>2、配置golang环境</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">wget</span> <span class="hljs-selector-tag">https</span>://<span class="hljs-selector-tag">golang</span><span class="hljs-selector-class">.google</span><span class="hljs-selector-class">.cn</span>/<span class="hljs-selector-tag">dl</span>/<span class="hljs-selector-tag">go1</span>.16<span class="hljs-selector-class">.linux-amd64</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span><br># 解压文件 <br><span class="hljs-selector-tag">tar</span> <span class="hljs-selector-tag">xfz</span> <span class="hljs-selector-tag">go1</span>.16<span class="hljs-selector-class">.linux-amd64</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> <span class="hljs-selector-tag">-C</span> /<span class="hljs-selector-tag">usr</span>/<span class="hljs-selector-tag">local</span><br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#修改~/.bashrc</span><br>vim ~/.bashrc<br><span class="hljs-comment">#添加Gopath路径</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOROOT</span>=/usr/local/go  <br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOPATH</span>=<span class="hljs-variable">$PATH</span>:$GOROOT/bin <br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$GOPATH</span>/bin:$PATH<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$GOROOT</span>/bin:$PATH<br><span class="hljs-comment"># 激活配置</span><br>source ~/.bashrc<br></code></pre></td></tr></table></figure><p>安装beego</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> env -<span class="hljs-keyword">w</span> GO111MODULE=<span class="hljs-keyword">on</span><br><span class="hljs-keyword">go</span> env -<span class="hljs-keyword">w</span> GOPROXY=http<span class="hljs-variable">s:</span>//goproxy.<span class="hljs-keyword">cn</span>,direct<br><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> -v github.<span class="hljs-keyword">com</span>/beego/beego/v2<br><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> -v github.<span class="hljs-keyword">com</span>/beego/bee/v2<br></code></pre></td></tr></table></figure><p>使用bee工具生成beego项目文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bee new web_test<br></code></pre></td></tr></table></figure><p>在web_test下利用go mod 整理依赖</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span> tidy<br></code></pre></td></tr></table></figure><p>在web_test下运行命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">bee <span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><p>但是此时并不能通过ip加端口的方式直接访问，需要配置一下安全组：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210224125900147.png" alt="image-20210224125900147"></p><p>点击当前策略组：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210224125955441.png" alt="image-20210224125955441"></p><p>添加如下策略组即可正常访问</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210224130017506.png" alt="image-20210224130017506"></p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>beginners</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang官网教程1 初探</title>
    <link href="/2021/02/18/golang%E5%AE%98%E7%BD%91%E6%95%99%E7%A8%8B1-%E5%88%9D%E6%8E%A2/"/>
    <url>/2021/02/18/golang%E5%AE%98%E7%BD%91%E6%95%99%E7%A8%8B1-%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="golang官网教程1-初探"><a href="#golang官网教程1-初探" class="headerlink" title="golang官网教程1 初探"></a>golang官网教程1 初探</h1><p>2021年2月16日，golang官方终于更新了1.16稳定版，终于可以适配m1 mac了</p><p>go1.16版本官方说明：</p><p><a href="https://blog.golang.org/go1.16">https://blog.golang.org/go1.16</a></p><h2 id="1-1-官网基本信息"><a href="#1-1-官网基本信息" class="headerlink" title="1.1 官网基本信息"></a>1.1 官网基本信息</h2><p>不得不说，golang作为新兴语言，其官网建设真的是清楚明白，接下来一一说明：</p><p>主要组成部分：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210218222405542.png" alt="image-20210218222405542"></p><p>在顶部选项栏里分别是golang详细文档、golang功能包、go项目详情、帮助、go官方博客、go play。</p><h3 id="1-1-1-document（开发者文档）"><a href="#1-1-1-document（开发者文档）" class="headerlink" title="1.1.1 document（开发者文档）"></a>1.1.1 document（开发者文档）</h3><p>与其说是开发者文档，不如说是一张老少咸宜的说明书，深入浅出，将太过技术性的东西藏在链接里面，更多的是人性化的教程和说明。</p><blockquote><p>Go编程语言是一个开源项目，旨在提高程序员的生产力。</p><p>Go富有表现力，简洁，整洁且高效。 它的并发机制使编写程序可以轻松地从多核和联网机器中获得最大收益，而其新颖的类型系统则可以实现灵活的模块化程序构造。 Go可以快速编译为机器代码，但具有垃圾回收的便利性和运行时反射的功能。 它是一种快速的，静态类型的编译语言，感觉就像是一种动态类型的解释语言。</p><p>​                                    ——golang官方说明</p></blockquote><p>document的第一个模块是一个新手教程（getting started）：<img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210218223433179.png" alt="image-20210218223433179">包括如何安装go以及官网上手教程链接。</p><p>接下来是简易的开始教程，其实可以忽略，但是若是想了解go语言的编译原理可以简单看看：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210221210248220.png" alt="image-20210221210248220"></p><p>大多数开发者包括笔者就是想用golang写后台，那么下面这个简单的web服务教程就必须看看，需要注意的是，该教程非常偏底层，要是想从头搭建一个后台可以看看，但是大多数情况下可以直接使用开源框架，比如gin和beego。gin更简洁高效，beego就像瑞士军刀，啥东西都有，而且因为是国人开发，有原生中文文档。</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210221210646203.png" alt="image-20210221210646203"></p><p>接下来有一篇专门描述go mod的使用方法的文章。关于go mod其实就是golang中专门管理包的工具，是go语言包中自带的，类似于python语言中的pip</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210221210900023.png" alt="image-20210221210900023"></p><p>最后就是<a href="https://tour.golang.org/">go语言线上教程</a>，内容极其丰富，自带网页编译器，学习的同时可以锻炼英文水平。</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210221211355024.png" alt="image-20210221211355024"></p><p>接下来的部分就是比较高阶的操作</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210221211757073.png" alt="image-20210221211757073"></p><p>总的来说还是比较推荐那个<a href="https://tour.golang.org/">go语言线上教程</a></p><p>在reference一节中有更详细的文档分类：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210221211910758.png" alt="image-20210221211910758"></p><p>信息量比想象中的要多，持续更新ying～</p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>golang</category>
      
      <category>official tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>beginners</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang小白入门7 数组</title>
    <link href="/2021/02/17/golang%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A87-%E6%95%B0%E7%BB%84/"/>
    <url>/2021/02/17/golang%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A87-%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="golang小白入门7-数组"><a href="#golang小白入门7-数组" class="headerlink" title="golang小白入门7 数组"></a>golang小白入门7 数组</h1><h2 id="7-0-定义"><a href="#7-0-定义" class="headerlink" title="7.0 定义"></a>7.0 定义</h2><p>Go 语言提供了数组类型的数据结构。</p><p>数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整形、字符串或者自定义类型。</p><p>数组元素可以通过索引（位置）来读取（或者修改），索引从0开始，第一个元素索引为 0，第二个索引为 1，以此类推。数组的下标取值范围是从0开始，到长度减1。</p><p>数组一旦定义后，大小不能更改。</p><h2 id="7-1-数组的语法"><a href="#7-1-数组的语法" class="headerlink" title="7.1 数组的语法"></a>7.1 数组的语法</h2><p>需要指明数组的大小和存储的数据类型。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> variable_name [SIZE] variable_type<br></code></pre></td></tr></table></figure></p><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> balance [<span class="hljs-number">10</span>] <span class="hljs-keyword">float32</span><br><span class="hljs-keyword">var</span> balance = [<span class="hljs-number">5</span>]<span class="hljs-keyword">float32</span>&#123;<span class="hljs-number">1000.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">7.0</span>, <span class="hljs-number">50.0</span>&#125;<br></code></pre></td></tr></table></figure><p>初始化数组中 {} 中的元素个数不能大于 [] 中的数字。<br>如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> balance = []<span class="hljs-keyword">float32</span>&#123;<span class="hljs-number">1000.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">7.0</span>, <span class="hljs-number">50.0</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">balance[<span class="hljs-number">4</span>] = <span class="hljs-number">50.0</span><br></code></pre></td></tr></table></figure><p>数组的其他创建方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a [<span class="hljs-number">4</span>] <span class="hljs-keyword">float32</span> <span class="hljs-comment">// 等价于：var arr2 = [4]float32&#123;&#125;</span><br>fmt.Println(a) <span class="hljs-comment">// [0 0 0 0]</span><br><span class="hljs-keyword">var</span> b = [<span class="hljs-number">5</span>] <span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;ruby&quot;</span>, <span class="hljs-string">&quot;王二狗&quot;</span>, <span class="hljs-string">&quot;rose&quot;</span>&#125;<br>fmt.Println(b) <span class="hljs-comment">// [ruby 王二狗 rose  ]</span><br><span class="hljs-keyword">var</span> c = [<span class="hljs-number">5</span>] <span class="hljs-keyword">int</span>&#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>&#125; <span class="hljs-comment">// byte</span><br>fmt.Println(c) <span class="hljs-comment">// [65 66 67 68 69]</span><br>d := [...] <span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<span class="hljs-comment">// 根据元素的个数，设置数组的大小</span><br>fmt.Println(d)<span class="hljs-comment">//[1 2 3 4 5]</span><br>e := [<span class="hljs-number">5</span>] <span class="hljs-keyword">int</span>&#123;<span class="hljs-number">4</span>: <span class="hljs-number">100</span>&#125; <span class="hljs-comment">// [0 0 0 0 100]</span><br>fmt.Println(e)<br>f := [...] <span class="hljs-keyword">int</span>&#123;<span class="hljs-number">0</span>: <span class="hljs-number">1</span>, <span class="hljs-number">4</span>: <span class="hljs-number">1</span>, <span class="hljs-number">9</span>: <span class="hljs-number">1</span>&#125; <span class="hljs-comment">// [1 0 0 0 1 0 0 0 0 1]</span><br>fmt.Println(f)<br></code></pre></td></tr></table></figure><p><strong>访问数组元素</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">float32</span> salary = balance[<span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">var</span> n [<span class="hljs-number">10</span>]<span class="hljs-keyword">int</span> <span class="hljs-comment">/* n 是一个长度为 10 的数组 */</span><br>   <span class="hljs-keyword">var</span> i,j <span class="hljs-keyword">int</span><br><br>   <span class="hljs-comment">/* 为数组 n 初始化元素 */</span>         <br>   <span class="hljs-keyword">for</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>      n[i] = i + <span class="hljs-number">100</span> <span class="hljs-comment">/* 设置元素为 i + 100 */</span><br>   &#125;<br><br>   <span class="hljs-comment">/* 输出每个数组元素的值 */</span><br>   <span class="hljs-keyword">for</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++ &#123;<br>      fmt.Printf(<span class="hljs-string">&quot;Element[%d] = %d\n&quot;</span>, j, n[j] )<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">Element[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>Element[<span class="hljs-number">1</span>] = <span class="hljs-number">101</span><br>Element[<span class="hljs-number">2</span>] = <span class="hljs-number">102</span><br>Element[<span class="hljs-number">3</span>] = <span class="hljs-number">103</span><br>Element[<span class="hljs-number">4</span>] = <span class="hljs-number">104</span><br>Element[<span class="hljs-number">5</span>] = <span class="hljs-number">105</span><br>Element[<span class="hljs-number">6</span>] = <span class="hljs-number">106</span><br>Element[<span class="hljs-number">7</span>] = <span class="hljs-number">107</span><br>Element[<span class="hljs-number">8</span>] = <span class="hljs-number">108</span><br>Element[<span class="hljs-number">9</span>] = <span class="hljs-number">109</span><br></code></pre></td></tr></table></figure><p><strong>数组的长度</strong></p><p>通过将数组作为参数传递给len函数，可以获得数组的长度。</p><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    a := [...]<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">67.7</span>, <span class="hljs-number">89.8</span>, <span class="hljs-number">21</span>, <span class="hljs-number">78</span>&#125;<br>    fmt.Println(<span class="hljs-string">&quot;length of a is&quot;</span>,<span class="hljs-built_in">len</span>(a))<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">length</span> <span class="hljs-keyword">of</span> a <span class="hljs-keyword">is</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>您甚至可以忽略声明中数组的长度并将其替换为…让编译器为你找到长度。这是在下面的程序中完成的。</p><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    a := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">12</span>, <span class="hljs-number">78</span>, <span class="hljs-number">50</span>&#125; <span class="hljs-comment">// ... makes the compiler determine the length</span><br>    fmt.Println(a)<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    a := [...]<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">67.7</span>, <span class="hljs-number">89.8</span>, <span class="hljs-number">21</span>, <span class="hljs-number">78</span>&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(a); i++ &#123; <span class="hljs-comment">//looping from 0 to the length of the array</span><br>        fmt.Printf(<span class="hljs-string">&quot;%d th element of a is %.2f\n&quot;</span>, i, a[i])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用range遍历数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    a := [...]<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">67.7</span>, <span class="hljs-number">89.8</span>, <span class="hljs-number">21</span>, <span class="hljs-number">78</span>&#125;<br>    sum := <span class="hljs-keyword">float64</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> a &#123;<span class="hljs-comment">//range returns both the index and value</span><br>        fmt.Printf(<span class="hljs-string">&quot;%d the element of a is %.2f\n&quot;</span>, i, v)<br>        sum += v<br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;\nsum of all elements of a&quot;</span>,sum)<br>&#125;<br></code></pre></td></tr></table></figure><p>如果您只需要值并希望忽略索引，那么可以通过使用_ blank标识符替换索引来实现这一点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a &#123; <span class="hljs-comment">//ignores index  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>Go 语言支持多维数组，以下为常用的多维数组声明语法方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> variable_name [SIZE1][SIZE2]...[SIZEN] variable_type<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> threedim [<span class="hljs-number">5</span>][<span class="hljs-number">10</span>][<span class="hljs-number">4</span>]<span class="hljs-keyword">int</span><br></code></pre></td></tr></table></figure><p>三维数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">a = [<span class="hljs-number">3</span>][<span class="hljs-number">4</span>]<span class="hljs-keyword">int</span>&#123;  <br> &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; ,   <span class="hljs-comment">/*  第一行索引为 0 */</span><br> &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125; ,   <span class="hljs-comment">/*  第二行索引为 1 */</span><br> &#123;<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>&#125;   <span class="hljs-comment">/*  第三行索引为 2 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-2-数组是值类型"><a href="#7-2-数组是值类型" class="headerlink" title="7.2 数组是值类型"></a>7.2 数组是值类型</h2><p>数组是值类型</p><p>Go中的数组是值类型，而不是引用类型。这意味着当它们被分配给一个新变量时，将把原始数组的副本分配给新变量。如果对新变量进行了更改，则不会在原始数组中反映。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    a := [...]<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;USA&quot;</span>, <span class="hljs-string">&quot;China&quot;</span>, <span class="hljs-string">&quot;India&quot;</span>, <span class="hljs-string">&quot;Germany&quot;</span>, <span class="hljs-string">&quot;France&quot;</span>&#125;<br>    b := a <span class="hljs-comment">// a copy of a is assigned to b</span><br>    b[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Singapore&quot;</span><br>    fmt.Println(<span class="hljs-string">&quot;a is &quot;</span>, a)<br>    fmt.Println(<span class="hljs-string">&quot;b is &quot;</span>, b) <br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">a <span class="hljs-keyword">is</span> <span class="hljs-comment">[USA China India Germany France]</span>  <br>b <span class="hljs-keyword">is</span> <span class="hljs-comment">[Singapore China India Germany France]</span> <br></code></pre></td></tr></table></figure><p>数组的大小是类型的一部分。因此[5]int和[25]int是不同的类型。因此，数组不能被调整大小。不要担心这个限制，因为切片的存在是为了解决这个问题。</p><p>错误示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    a := [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">5</span>, <span class="hljs-number">78</span>, <span class="hljs-number">8</span>&#125;<br>    <span class="hljs-keyword">var</span> b [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span><br>    b = a <span class="hljs-comment">//not possible since [3]int and [5]int are distinct types</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>beginners</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang小白入门6 循环语句</title>
    <link href="/2021/02/12/golang%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A86-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/02/12/golang%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A86-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="golang小白入门6-循环语句"><a href="#golang小白入门6-循环语句" class="headerlink" title="golang小白入门6 循环语句"></a>golang小白入门6 循环语句</h1><h2 id="6-0-程序的流程结构"><a href="#6-0-程序的流程结构" class="headerlink" title="6.0 程序的流程结构"></a>6.0 程序的流程结构</h2><p>程序的流程控制结构一共有三种：顺序结构，选择结构，循环结构。</p><p>顺序结构：代码从上向下逐行的执行</p><p>选择结构：条件满足，某些代码才会被执行。0-1次</p><p>​    if语句，switch语句</p><p>循环结构：条件满足，某些代码会被反复的多次执行。0-n次</p><p>​    for语句</p><h2 id="6-1-for语句"><a href="#6-1-for语句" class="headerlink" title="6.1 for语句"></a>6.1 for语句</h2><p>语法结构</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for init<span class="hljs-comment">; condition; post &#123; &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>初始化语句只执行一次。在初始化循环之后，将检查该条件。如果条件计算为true，那么{}中的循环体将被执行，然后是post语句。post语句将在循环的每次成功迭代之后执行。在执行post语句之后，该条件将被重新检查。如果它是正确的，循环将继续执行，否则循环终止。</p></blockquote><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++ &#123;<br>        fmt.Printf(<span class="hljs-string">&quot; %d&quot;</span>,i)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-1-1-for循环变体"><a href="#6-1-1-for循环变体" class="headerlink" title="6.1.1 for循环变体"></a>6.1.1 for循环变体</h3><p><strong>所有的三个组成部分，即初始化、条件和post都是可选的。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">condition</span> &#123; &#125;<br></code></pre></td></tr></table></figure><p>效果与while相似</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">for</span> &#123; &#125;<br></code></pre></td></tr></table></figure><p>效果与for(;;) 一样</p><p>for 循环的 range 格式可以对 slice、map、数组、字符串等进行迭代循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> oldMap &#123;<br>    newMap[key] = value<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>   <span class="hljs-keyword">var</span> b <span class="hljs-keyword">int</span> = <span class="hljs-number">15</span><br>   <span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span><br><br>   numbers := [<span class="hljs-number">6</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125; <br><br>   <span class="hljs-comment">/* for 循环 */</span><br>   <span class="hljs-keyword">for</span> a := <span class="hljs-number">0</span>; a &lt; <span class="hljs-number">10</span>; a++ &#123;<br>      fmt.Printf(<span class="hljs-string">&quot;a 的值为: %d\n&quot;</span>, a)<br>   &#125;<br><br>   <span class="hljs-keyword">for</span> a &lt; b &#123;<br>      a++<br>      fmt.Printf(<span class="hljs-string">&quot;a 的值为: %d\n&quot;</span>, a)<br>      &#125;<br><br>   <span class="hljs-keyword">for</span> i,x:= <span class="hljs-keyword">range</span> numbers &#123;<br>      fmt.Printf(<span class="hljs-string">&quot;第 %d 位 x 的值 = %d\n&quot;</span>, i,x)<br>   &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go">a 的值为: <span class="hljs-number">0</span><br>a 的值为: <span class="hljs-number">1</span><br>a 的值为: <span class="hljs-number">2</span><br>a 的值为: <span class="hljs-number">3</span><br>a 的值为: <span class="hljs-number">4</span><br>a 的值为: <span class="hljs-number">5</span><br>a 的值为: <span class="hljs-number">6</span><br>a 的值为: <span class="hljs-number">7</span><br>a 的值为: <span class="hljs-number">8</span><br>a 的值为: <span class="hljs-number">9</span><br>a 的值为: <span class="hljs-number">1</span><br>a 的值为: <span class="hljs-number">2</span><br>a 的值为: <span class="hljs-number">3</span><br>a 的值为: <span class="hljs-number">4</span><br>a 的值为: <span class="hljs-number">5</span><br>a 的值为: <span class="hljs-number">6</span><br>a 的值为: <span class="hljs-number">7</span><br>a 的值为: <span class="hljs-number">8</span><br>a 的值为: <span class="hljs-number">9</span><br>a 的值为: <span class="hljs-number">10</span><br>a 的值为: <span class="hljs-number">11</span><br>a 的值为: <span class="hljs-number">12</span><br>a 的值为: <span class="hljs-number">13</span><br>a 的值为: <span class="hljs-number">14</span><br>a 的值为: <span class="hljs-number">15</span><br>第 <span class="hljs-number">0</span> 位 x 的值 = <span class="hljs-number">1</span><br>第 <span class="hljs-number">1</span> 位 x 的值 = <span class="hljs-number">2</span><br>第 <span class="hljs-number">2</span> 位 x 的值 = <span class="hljs-number">3</span><br>第 <span class="hljs-number">3</span> 位 x 的值 = <span class="hljs-number">5</span><br>第 <span class="hljs-number">4</span> 位 x 的值 = <span class="hljs-number">0</span><br>第 <span class="hljs-number">5</span> 位 x 的值 = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="6-1-2-多层for循环"><a href="#6-1-2-多层for循环" class="headerlink" title="6.1.2 多层for循环"></a>6.1.2 多层for循环</h3><p>for循环中又有循环嵌套，就表示多层循环了。</p><h2 id="6-2-跳出循环"><a href="#6-2-跳出循环" class="headerlink" title="6.2 跳出循环"></a>6.2 跳出循环</h2><h3 id="6-2-1-break"><a href="#6-2-1-break" class="headerlink" title="6.2.1 break"></a>6.2.1 break</h3><p>break：跳出循环体。break语句用于在结束其正常执行之前突然终止for循环</p><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++ &#123;<br>        <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">5</span> &#123;<br>            <span class="hljs-keyword">break</span> <span class="hljs-comment">//loop is terminated if i &gt; 5</span><br>        &#125;<br>        fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, i)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;\nline after for loop&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-2-continue语句"><a href="#6-2-2-continue语句" class="headerlink" title="6.2.2 continue语句"></a>6.2.2 continue语句</h3><p>continue：跳出一次循环。continue语句用于跳过for循环的当前迭代。在continue语句后面的for循环中的所有代码将不会在当前迭代中执行。循环将继续到下一个迭代。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++ &#123;<br>        <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, i)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-3-goto语句"><a href="#6-2-3-goto语句" class="headerlink" title="6.2.3 goto语句"></a>6.2.3 goto语句</h3><p>goto：可以无条件地转移到过程中指定的行。</p><p>语法结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">goto</span> label;<br>..<br>..<br>label: statement;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">/* 定义局部变量 */</span><br>   <span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span> = <span class="hljs-number">10</span><br><br>   <span class="hljs-comment">/* 循环 */</span><br>   LOOP: <span class="hljs-keyword">for</span> a &lt; <span class="hljs-number">20</span> &#123;<br>      <span class="hljs-keyword">if</span> a == <span class="hljs-number">15</span> &#123;<br>         <span class="hljs-comment">/* 跳过迭代 */</span><br>         a = a + <span class="hljs-number">1</span><br>         <span class="hljs-keyword">goto</span> LOOP<br>      &#125;<br>      fmt.Printf(<span class="hljs-string">&quot;a的值为 : %d\n&quot;</span>, a)<br>      a++     <br>   &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>统一错误处理</strong><br>多处错误处理存在代码重复时是非常棘手的，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">err := firstCheckError()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">goto</span> onExit<br>    &#125;<br>    err = secondCheckError()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">goto</span> onExit<br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;done&quot;</span>)<br>    <span class="hljs-keyword">return</span><br>onExit:<br>    fmt.Println(err)<br>    exitProcess()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>beginners</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang小白入门5 分支语句</title>
    <link href="/2021/02/12/golang%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A85-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/02/12/golang%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A85-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="golang小白入门5-分支语句"><a href="#golang小白入门5-分支语句" class="headerlink" title="golang小白入门5 分支语句"></a>golang小白入门5 分支语句</h1><h2 id="5-0-程序的流程结构"><a href="#5-0-程序的流程结构" class="headerlink" title="5.0 程序的流程结构"></a>5.0 程序的流程结构</h2><p>程序的流程控制结构一共有三种：<strong>顺序结构，选择结构，循环结构</strong>。</p><p>顺序结构：从上向下，逐行执行。</p><p>选择结构：条件满足，某些代码才会执行。0-1次</p><p>  分支语句：if，switch，select</p><p>循环结构：条件满足，某些代码会被反复的执行多次。0-N次</p><p>  循环语句：for</p><h2 id="5-1-if语句"><a href="#5-1-if语句" class="headerlink" title="5.1 if语句"></a>5.1 if语句</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> 布尔表达式 &#123;<br>   <span class="hljs-comment">/* 在布尔表达式为 true 时执行 */</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> 布尔表达式 &#123;<br>   <span class="hljs-comment">/* 在布尔表达式为 true 时执行 */</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">/* 在布尔表达式为 false 时执行 */</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> 布尔表达式<span class="hljs-number">1</span> &#123;<br>   <span class="hljs-comment">/* 在布尔表达式1为 true 时执行 */</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> 布尔表达式<span class="hljs-number">2</span>&#123;<br>   <span class="hljs-comment">/* 在布尔表达式1为 false ,布尔表达式2为true时执行 */</span><br>&#125; <span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-comment">/* 在上面两个布尔表达式都为false时，执行*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">/* 定义局部变量 */</span><br>   <span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span> = <span class="hljs-number">10</span><br> <br>   <span class="hljs-comment">/* 使用 if 语句判断布尔表达式 */</span><br>   <span class="hljs-keyword">if</span> a &lt; <span class="hljs-number">20</span> &#123;<br>       <span class="hljs-comment">/* 如果条件为 true 则执行以下语句 */</span><br>       fmt.Printf(<span class="hljs-string">&quot;a 小于 20\n&quot;</span> )<br>   &#125;<br>   fmt.Printf(<span class="hljs-string">&quot;a 的值为 : %d\n&quot;</span>, a)<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">a 小于 20<br>a 的值为 : 10<br><br>Process finished with <span class="hljs-built_in">exit</span> code 0<br></code></pre></td></tr></table></figure><h3 id="5-1-1-if变体"><a href="#5-1-1-if变体" class="headerlink" title="5.1.1 if变体"></a>5.1.1 if变体</h3><p>如果其中包含一个可选的语句组件(在评估条件之前执行)，则还有一个变体。它的语法是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> statement; condition &#123;  <br>&#125;<br><br><span class="hljs-keyword">if</span> condition&#123;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">if</span> num := <span class="hljs-number">10</span>; num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123; <span class="hljs-comment">//checks if number is even</span><br>        fmt.Println(num,<span class="hljs-string">&quot;is even&quot;</span>) <br>    &#125;  <span class="hljs-keyword">else</span> &#123;<br>        fmt.Println(num,<span class="hljs-string">&quot;is odd&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>需要注意的是，num的定义在if里，那么只能够在该if..else语句块中使用，否则编译器会报错的。</p></blockquote><h2 id="5-2-switch语句：“开关”"><a href="#5-2-switch语句：“开关”" class="headerlink" title="5.2 switch语句：“开关”"></a>5.2 switch语句：“开关”</h2><p>switch是一个条件语句，它计算表达式并将其与可能匹配的列表进行比较，并根据匹配执行代码块。它可以被认为是一种惯用的方式来写多个if else子句。</p><p>switch 语句用于基于不同条件执行不同动作，每一个 case 分支都是唯一的，从上直下逐一测试，直到匹配为止。<br>switch 语句执行的过程从上至下，直到找到匹配项，匹配项后面也不需要再加break。</p><p>而如果switch没有表达式，它会匹配true</p><p>Go里面switch默认相当于每个case最后带有break，匹配成功后不会自动向下执行其他case，而是跳出整个switch, 但是可以使用fallthrough强制执行后面的case代码。</p><p>变量 var1 可以是任何类型，而 val1 和 val2 则可以是同类型的任意值。类型不被局限于常量或整数，但必须是相同的类型；或者最终结果为相同类型的表达式。<br>您可以<strong>同时测试多个可能符合条件的值，使用逗号分割它们</strong>，例如：case val1, val2, val3。</p><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">/* 定义局部变量 */</span><br>   <span class="hljs-keyword">var</span> grade <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;B&quot;</span><br>   <span class="hljs-keyword">var</span> marks <span class="hljs-keyword">int</span> = <span class="hljs-number">90</span><br><br>   <span class="hljs-keyword">switch</span> marks &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">90</span>: grade = <span class="hljs-string">&quot;A&quot;</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-number">80</span>: grade = <span class="hljs-string">&quot;B&quot;</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-number">50</span>,<span class="hljs-number">60</span>,<span class="hljs-number">70</span> : grade = <span class="hljs-string">&quot;C&quot;</span>  <span class="hljs-comment">//case 后可以由多个数值</span><br>      <span class="hljs-keyword">default</span>: grade = <span class="hljs-string">&quot;D&quot;</span>  <br>   &#125;<br><br>   <span class="hljs-keyword">switch</span> &#123;<br>      <span class="hljs-keyword">case</span> grade == <span class="hljs-string">&quot;A&quot;</span> :<br>         fmt.Printf(<span class="hljs-string">&quot;优秀!\n&quot;</span> )     <br>      <span class="hljs-keyword">case</span> grade == <span class="hljs-string">&quot;B&quot;</span>, grade == <span class="hljs-string">&quot;C&quot;</span> :<br>         fmt.Printf(<span class="hljs-string">&quot;良好\n&quot;</span> )      <br>      <span class="hljs-keyword">case</span> grade == <span class="hljs-string">&quot;D&quot;</span> :<br>         fmt.Printf(<span class="hljs-string">&quot;及格\n&quot;</span> )      <br>      <span class="hljs-keyword">case</span> grade == <span class="hljs-string">&quot;F&quot;</span>:<br>         fmt.Printf(<span class="hljs-string">&quot;不及格\n&quot;</span> )<br>      <span class="hljs-keyword">default</span>:<br>         fmt.Printf(<span class="hljs-string">&quot;差\n&quot;</span> );<br>   &#125;<br>   fmt.Printf(<span class="hljs-string">&quot;你的等级是 %s\n&quot;</span>, grade );      <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-1-fallthrough"><a href="#5-2-1-fallthrough" class="headerlink" title="5.2.1 fallthrough"></a>5.2.1 fallthrough</h3><p>如需贯通后续的case，就添加fallthrough</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> data [<span class="hljs-number">2</span>]<span class="hljs-keyword">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">switch</span> x := <span class="hljs-number">5</span>; x &#123;<br><span class="hljs-keyword">default</span>:<br>fmt.Println(x)<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>x += <span class="hljs-number">10</span><br>fmt.Println(x)<br><span class="hljs-keyword">fallthrough</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>x += <span class="hljs-number">20</span><br>fmt.Println(x)<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">15</span><br><span class="hljs-number">35</span><br></code></pre></td></tr></table></figure><p>case中的表达式是可选的，可以省略。如果该表达式被省略，则被认为是switch true，并且每个case表达式都被计算为true，并执行相应的代码块。</p><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    num := <span class="hljs-number">75</span><br>    <span class="hljs-keyword">switch</span> &#123; <span class="hljs-comment">// expression is omitted</span><br>    <span class="hljs-keyword">case</span> num &gt;= <span class="hljs-number">0</span> &amp;&amp; num &lt;= <span class="hljs-number">50</span>:<br>        fmt.Println(<span class="hljs-string">&quot;num is greater than 0 and less than 50&quot;</span>)<br>    <span class="hljs-keyword">case</span> num &gt;= <span class="hljs-number">51</span> &amp;&amp; num &lt;= <span class="hljs-number">100</span>:<br>        fmt.Println(<span class="hljs-string">&quot;num is greater than 51 and less than 100&quot;</span>)<br>    <span class="hljs-keyword">case</span> num &gt;= <span class="hljs-number">101</span>:<br>        fmt.Println(<span class="hljs-string">&quot;num is greater than 100&quot;</span>)<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>switch的注意事项</p><ol><li>case后的常量值不能重复</li><li>case后可以有多个常量值</li><li>fallthrough应该是某个case的最后一行。如果它出现在中间的某个地方，编译器就会抛出错误。</li></ol></blockquote><h3 id="5-2-2-type-switch"><a href="#5-2-2-type-switch" class="headerlink" title="5.2.2 type switch"></a>5.2.2 type switch</h3><p>switch 语句还可以被用于 type-switch 来判断某个 interface 变量中实际存储的变量类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> x.(<span class="hljs-keyword">type</span>)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">type</span>:<br>       statement(s);      <br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">type</span>:<br>       statement(s); <br>    <span class="hljs-comment">/* 你可以定义任意个数的case */</span><br>    <span class="hljs-keyword">default</span>: <span class="hljs-comment">/* 可选 */</span><br>       statement(s);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">var</span> x <span class="hljs-keyword">interface</span>&#123;&#125;<br>     <br>   <span class="hljs-keyword">switch</span> i := x.(<span class="hljs-keyword">type</span>) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>:  <br>         fmt.Printf(<span class="hljs-string">&quot; x 的类型 :%T&quot;</span>,i)                <br>      <span class="hljs-keyword">case</span> <span class="hljs-keyword">int</span>:  <br>         fmt.Printf(<span class="hljs-string">&quot;x 是 int 型&quot;</span>)                       <br>      <span class="hljs-keyword">case</span> <span class="hljs-keyword">float64</span>:<br>         fmt.Printf(<span class="hljs-string">&quot;x 是 float64 型&quot;</span>)           <br>      <span class="hljs-keyword">case</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">float64</span>:</span><br>         fmt.Printf(<span class="hljs-string">&quot;x 是 func(int) 型&quot;</span>)                      <br>      <span class="hljs-keyword">case</span> <span class="hljs-keyword">bool</span>, <span class="hljs-keyword">string</span>:<br>         fmt.Printf(<span class="hljs-string">&quot;x 是 bool 或 string 型&quot;</span> )       <br>      <span class="hljs-keyword">default</span>:<br>         fmt.Printf(<span class="hljs-string">&quot;未知型&quot;</span>)     <br>   &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">x 的类型 :&lt;<span class="hljs-literal">nil</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>beginners</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang小白入门4 键盘输入输出</title>
    <link href="/2021/02/11/golang%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A84-%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <url>/2021/02/11/golang%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A84-%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="golang小白入门4-键盘输入输出"><a href="#golang小白入门4-键盘输入输出" class="headerlink" title="golang小白入门4 键盘输入输出"></a>golang小白入门4 键盘输入输出</h1><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><h2 id="4-1-fmt包"><a href="#4-1-fmt包" class="headerlink" title="4.1 fmt包"></a>4.1 fmt包</h2><p>fmt包实现了类似C语言printf和scanf的格式化I/O。格式化verb（’verb’）源自C语言但更简单。</p><p>详见官网fmt的API：<a href="https://golang.google.cn/pkg/fmt/">https://golang.google.cn/pkg/fmt/</a></p><h2 id="4-2-导入包"><a href="#4-2-导入包" class="headerlink" title="4.2 导入包"></a>4.2 导入包</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-3-常用打印函数"><a href="#4-3-常用打印函数" class="headerlink" title="4.3 常用打印函数"></a>4.3 常用打印函数</h2><h3 id="4-3-1-打印"><a href="#4-3-1-打印" class="headerlink" title="4.3.1 打印"></a>4.3.1 打印</h3><p><a href="https://golang.google.cn/pkg/fmt/#Print">func Print(a …interface{}) (n int, err error)</a></p><h3 id="4-3-2-格式化打印"><a href="#4-3-2-格式化打印" class="headerlink" title="4.3.2 格式化打印"></a>4.3.2 格式化打印</h3><p><a href="https://golang.google.cn/pkg/fmt/#Printf">func Printf(format string, a …interface{}) (n int, err error)</a></p><h3 id="4-3-3-打印后换行"><a href="#4-3-3-打印后换行" class="headerlink" title="4.3.3 打印后换行"></a>4.3.3 <strong>打印后换行</strong></h3><p><a href="https://golang.google.cn/pkg/fmt/#Println">func Println(a …interface{}) (n int, err error)</a></p><p>格式化打印中的常用占位符：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">%v,原样输出<br>%T，打印类型<br>%t,<span class="hljs-keyword">bool</span>类型<br>%s，字符串<br>%f，浮点<br>%d，<span class="hljs-number">10</span>进制的整数<br>%b，<span class="hljs-number">2</span>进制的整数<br>%o，<span class="hljs-number">8</span>进制<br>%x，%X，<span class="hljs-number">16</span>进制<br>%x：<span class="hljs-number">0</span><span class="hljs-number">-9</span>，a-f<br>%X：<span class="hljs-number">0</span><span class="hljs-number">-9</span>，A-F<br>%c，打印字符<br>%p，打印地址<br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := <span class="hljs-number">100</span>           <span class="hljs-comment">//int</span><br>b := <span class="hljs-number">3.14</span>          <span class="hljs-comment">//float64</span><br>c := <span class="hljs-literal">true</span>          <span class="hljs-comment">// bool</span><br>d := <span class="hljs-string">&quot;Hello World&quot;</span> <span class="hljs-comment">//string</span><br>e := <span class="hljs-string">`Ruby`</span>        <span class="hljs-comment">//string</span><br>f := <span class="hljs-string">&#x27;A&#x27;</span><br>fmt.Printf(<span class="hljs-string">&quot;%T,%b\n&quot;</span>, a, a)<br>fmt.Printf(<span class="hljs-string">&quot;%T,%f\n&quot;</span>, b, b)<br>fmt.Printf(<span class="hljs-string">&quot;%T,%t\n&quot;</span>, c, c)<br>fmt.Printf(<span class="hljs-string">&quot;%T,%s\n&quot;</span>, d, d)<br>fmt.Printf(<span class="hljs-string">&quot;%T,%s\n&quot;</span>, e, e)<br>fmt.Printf(<span class="hljs-string">&quot;%T,%d,%c\n&quot;</span>, f, f, f)<br>fmt.Println(<span class="hljs-string">&quot;-----------------------&quot;</span>)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, a)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, b)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, c)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, d)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, e)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, f)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210211213023297.png" alt="image-20210211213023297"></p><h1 id="键盘输入"><a href="#键盘输入" class="headerlink" title="键盘输入"></a>键盘输入</h1><h2 id="4-4-fmt包读取键盘输入"><a href="#4-4-fmt包读取键盘输入" class="headerlink" title="4.4 fmt包读取键盘输入"></a>4.4 fmt包读取键盘输入</h2><p><a href="https://golang.google.cn/pkg/fmt/#Scan">func Scan(a …interface{}) (n int, err error)</a></p><p><a href="https://golang.google.cn/pkg/fmt/#Scanf">func Scanf(format string, a …interface{}) (n int, err error)</a></p><p><a href="https://golang.google.cn/pkg/fmt/#Scanln">func Scanln(a …interface{}) (n int, err error)</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> x <span class="hljs-keyword">int</span><br><span class="hljs-keyword">var</span> y <span class="hljs-keyword">float64</span><br>fmt.Println(<span class="hljs-string">&quot;请输入一个整数，一个浮点类型：&quot;</span>)<br>fmt.Scanln(&amp;x,&amp;y)<span class="hljs-comment">//读取键盘的输入，通过操作地址，赋值给x和y   阻塞式</span><br>fmt.Printf(<span class="hljs-string">&quot;x的数值：%d，y的数值：%f\n&quot;</span>,x,y)<br><br>fmt.Scanf(<span class="hljs-string">&quot;%d,%f&quot;</span>,&amp;x,&amp;y)<br>fmt.Printf(<span class="hljs-string">&quot;x:%d,y:%f\n&quot;</span>,x,y)<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210211214111130.png" alt="image-20210211214111130"></p><h2 id="4-5-bufio包读取"><a href="#4-5-bufio包读取" class="headerlink" title="4.5 bufio包读取"></a>4.5 <strong>bufio包读取</strong></h2><p>官方文档：</p><p><a href="https://golang.google.cn/pkg/bufio/">https://golang.google.cn/pkg/bufio/</a></p><p>bufio包中都是IO操作的方法：</p><p>先创建Reader对象：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210211213941807.png" alt="image-20210211213941807"></p><p>然后就可以各种读取了：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210211214042730.png" alt="image-20210211214042730"></p><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;bufio&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;请输入一个字符串：&quot;</span>)<br>reader := bufio.NewReader(os.Stdin)<br>s1, _ := reader.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>fmt.Println(<span class="hljs-string">&quot;读到的数据：&quot;</span>, s1)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210211214337403.png" alt="image-20210211214337403"></p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>beginners</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 小白入门3:数据类型</title>
    <link href="/2021/02/11/golang-%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A83-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/02/11/golang-%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A83-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-小白入门3-数据类型"><a href="#golang-小白入门3-数据类型" class="headerlink" title="golang 小白入门3:数据类型"></a>golang 小白入门3:数据类型</h1><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p>以下是go中可用的基本数据类型</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210211140823095.png" alt="image-20210211140823095"></p><h2 id="3-1-布尔型bool"><a href="#3-1-布尔型bool" class="headerlink" title="3.1 布尔型bool"></a>3.1 布尔型bool</h2><p>布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true</p><h2 id="3-2-数值型"><a href="#3-2-数值型" class="headerlink" title="3.2 数值型"></a>3.2 数值型</h2><h3 id="3-2-1-整数型"><a href="#3-2-1-整数型" class="headerlink" title="3.2.1 整数型"></a>3.2.1 整数型</h3><ul><li><p>int8</p><p>  有符号 8 位整型 (-128 到 127)</p><p>长度：8bit</p></li><li><p>int16</p><p>有符号 16 位整型 (-32768 到 32767)</p></li><li><p>int32</p><p>有符号 32 位整型 (-2147483648 到 2147483647)</p></li><li><p>int64</p><p>有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</p></li><li><p>uint8</p><p>无符号 8 位整型 (0 到 255)</p></li></ul><p>8位都用于表示数值：</p><ul><li><p>uint16</p><p>无符号 16 位整型 (0 到 65535)</p></li><li><p>uint32</p><p>无符号 32 位整型 (0 到 4294967295)</p></li><li><p>uint64</p><p>无符号 64 位整型 (0 到 18446744073709551615)</p></li></ul><blockquote><p>int和uint:根据底层平台，表示32或64位整数。除非需要使用特定大小的整数，否则通常应该使用int来表示整数。</p><p>大小:32位系统32位，64位系统64位。</p><p>范围:-2147483648到2147483647的32位系统和-9223372036854775808到9223372036854775807的64位系统。</p></blockquote><h3 id="3-2-2-浮点型"><a href="#3-2-2-浮点型" class="headerlink" title="3.2.2 浮点型"></a>3.2.2 浮点型</h3><ul><li><p>float32</p><p>IEEE-754 32位浮点型数</p></li><li><p>float64</p><p>IEEE-754 64位浮点型数</p></li><li><p>complex64</p><p>32 位实数和虚数</p></li><li><p>complex128</p><p>64 位实数和虚数</p></li></ul><h3 id="3-2-3-其他"><a href="#3-2-3-其他" class="headerlink" title="3.2.3 其他"></a>3.2.3 其他</h3><ul><li><p>byte</p><p>类似 uint8</p></li><li><p>rune</p><p>类似 int32</p></li><li><p>uint</p><p>32 或 64 位</p></li><li><p>int</p><p>与 uint 一样大小</p></li><li><p>uintptr</p><p>无符号整型，用于存放一个指针</p></li></ul><h2 id="3-3-字符串型"><a href="#3-3-字符串型" class="headerlink" title="3.3 字符串型"></a>3.3 字符串型</h2><p>字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> str <span class="hljs-keyword">string</span><br>str = <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-4-数据类型转换"><a href="#3-4-数据类型转换" class="headerlink" title="3.4 数据类型转换"></a>3.4 数据类型转换</h2><p>语法格式：Type(Value)</p><p>常数：在有需要的时候，会自动转型</p><p>变量：需要手动转型 T(V)</p><p>注意点：兼容类型可以转换</p><h1 id="复合类型（派生类型）"><a href="#复合类型（派生类型）" class="headerlink" title="复合类型（派生类型）"></a>复合类型（派生类型）</h1><p>1、指针类型（Pointer）</p><p>2、数组类型</p><p>3、结构化类型(struct)</p><p>4、Channel 类型</p><p>5、函数类型</p><p>6、切片类型</p><p>7、接口类型（interface）</p><p>8、Map 类型</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>表达式：(a + b) * c</p><p>  a,b,c叫做操作数</p><p>  +，*，叫做运算符</p><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">\+ - * / %(求余) ++ --<br></code></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">== != &gt; &lt; &gt;= &lt;=<br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>所谓逻辑与运算符。如果两个操作数都非零，则条件变为真</td></tr><tr><td>\</td><td>\</td><td></td><td>所谓的逻辑或操作。如果任何两个操作数是非零，则条件变为真</td></tr><tr><td>!</td><td>所谓逻辑非运算符。使用反转操作数的逻辑状态。如果条件为真，那么逻辑非操后结果为假</td></tr></tbody></table></div><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><div class="table-container"><table><thead><tr><th>A</th><th>B</th><th>A&amp;B</th><th>A\</th><th>B</th><th>A^B</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr></tbody></table></div><p>这里最难理解的就是^了，只要认为AB两者都相同的时候，为0，其他都为1</p><p>假设A为60，B为13</p><div class="table-container"><table><thead><tr><th>运算</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&amp;</td><td>二进制与操作副本位的结果，如果它存在于两个操作数</td><td>(A &amp; B) = 12, 也就是 0000 1100</td></tr><tr><td>\</td><td></td><td>二进制或操作副本，如果它存在一个操作数</td><td>(A \</td><td>B) = 61, 也就是 0011 1101</td></tr><tr><td>^</td><td>二进制异或操作副本，如果它被设置在一个操作数就是按位取非</td><td>(A ^ B) = 49, 也就是 0011 0001</td></tr><tr><td>&amp;^</td><td>二进制位清空&amp;^</td><td>(A&amp;^B)=48，也就是110000</td></tr><tr><td>&lt;&lt;</td><td>二进制左移位运算符。左边的操作数的值向左移动由右操作数指定的位数</td><td>A &lt;&lt; 2 =240 也就是 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>二进制向右移位运算符。左边的操作数的值由右操作数指定的位数向右移动</td><td>A &gt;&gt; 2 = 15 也就是 0000 1111</td></tr></tbody></table></div><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值操作符，分配值从右边的操作数左侧的操作数</td><td>C = A + B 将分配A + B的值到C</td></tr><tr><td>+=</td><td>相加并赋值运算符，它增加了右操作数左操作数和分配结果左操作数</td><td>C += A 相当于 C = C + A</td></tr><tr><td>-=</td><td>减和赋值运算符，它减去右操作数从左侧的操作数和分配结果左操作数</td><td>C -= A 相当于 C = C - A</td></tr><tr><td>*=</td><td>乘法和赋值运算符，它乘以右边的操作数与左操作数和分配结果左操作数</td><td>C <em>= A 相当于 C = C </em> A</td></tr><tr><td>/=</td><td>除法赋值运算符，它把左操作数与右操作数和分配结果左操作数</td><td>C /= A 相当于 C = C / A</td></tr><tr><td>%=</td><td>模量和赋值运算符，它需要使用两个操作数的模量和分配结果左操作数</td><td>C %= A 相当于 C = C % A</td></tr><tr><td>&lt;&lt;=</td><td>左移位并赋值运算符</td><td>C &lt;&lt;= 2 相同于 C = C &lt;&lt; 2</td></tr><tr><td>&gt;&gt;=</td><td>向右移位并赋值运算符</td><td>C &gt;&gt;= 2 相同于 C = C &gt;&gt; 2</td></tr><tr><td>&amp;=</td><td>按位与赋值运算符</td><td>C &amp;= 2 相同于 C = C &amp; 2</td></tr><tr><td>^=</td><td>按位异或并赋值运算符</td><td>C ^= 2 相同于 C = C ^ 2</td></tr><tr><td>\</td><td>=</td><td>按位或并赋值运算符</td><td>C \</td><td>= 2 相同于 C = C \</td><td>2</td></tr></tbody></table></div><h2 id="优先级运算符优先级"><a href="#优先级运算符优先级" class="headerlink" title="优先级运算符优先级"></a><strong>优先级运算符优先级</strong></h2><p>有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：</p><div class="table-container"><table><thead><tr><th>优先级</th><th>运算符</th></tr></thead><tbody><tr><td>7</td><td>~ ! ++ —</td></tr><tr><td>6</td><td>* / % &lt;&lt; &gt;&gt; &amp; &amp;^</td></tr><tr><td>5</td><td>+ -  ^</td></tr><tr><td>4</td><td>== != &lt; &lt;= &gt;= &gt;</td></tr><tr><td>3</td><td>&lt;-</td></tr><tr><td>2</td><td>&amp;&amp;</td></tr><tr><td>1</td><td>\</td><td>\</td></tr></tbody></table></div><p>当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。</p><blockquote><p>千锋Go语言的学习群：784190273</p><p>作者B站：</p><p><a href="https://space.bilibili.com/353694001">https://space.bilibili.com/353694001</a></p><p>对应视频地址：</p><p><a href="https://www.bilibili.com/video/av56018934">https://www.bilibili.com/video/av56018934</a></p><p><a href="https://www.bilibili.com/video/av47467197">https://www.bilibili.com/video/av47467197</a></p><p>源代码：</p><p><a href="https://github.com/rubyhan1314/go_foundation">https://github.com/rubyhan1314/go_foundation</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>beginners</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 小白入门2:基本语法</title>
    <link href="/2021/02/11/golang-%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A82-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/02/11/golang-%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A82-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-小白入门2-基本语法"><a href="#golang-小白入门2-基本语法" class="headerlink" title="golang 小白入门2:基本语法"></a>golang 小白入门2:基本语法</h1><p>本帖大部分内容摘抄自</p><p><a href="https://github.com/rubyhan1314/Golang-100-Days">https://github.com/rubyhan1314/Golang-100-Days</a></p><p>麻烦给人家点个<code>star</code>ヽ(✿ﾟ▽ﾟ)ノ</p><h2 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h2><p>变量是为存储特定类型的值而提供给内存位置的名称。在go中声明变量有多种语法。</p><p>所以变量的本质就是一小块内存，用于存储数据，在程序运行过程中数值可以改变</p><p>var名称类型是声明单个变量的语法。</p><blockquote><p>以字母或下划线开头，由一个或多个字母、数字、下划线组成</p></blockquote><h3 id="2-1-1-声明"><a href="#2-1-1-声明" class="headerlink" title="2.1.1 声明"></a>2.1.1 声明</h3><p>第一种，指定变量类型，声明后若不赋值，使用默认值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> name <span class="hljs-keyword">type</span><br><br>name = value<br></code></pre></td></tr></table></figure><p>第二种，根据值自行判定变量类型(类型推断Type inference)</p><p>如果一个变量有一个初始值，Go将自动能够使用初始值来推断该变量的类型。因此，如果变量具有初始值，则可以省略变量声明中的类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> name = value<br></code></pre></td></tr></table></figure><p>第三种，省略var, 注意 :=左侧的变量不应该是已经声明过的(多个变量同时声明时，至少保证一个是新变量)，否则会导致编译错误(简短声明)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">name := value<br><span class="hljs-comment">// 例如</span><br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span> = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-number">10</span><br>c : = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><blockquote><p>这种方式它只能被用在函数体内，而不可以用于全局变量的声明与赋值</p></blockquote><p><strong>示例代码：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;Hello&quot;</span><br><span class="hljs-keyword">var</span> b <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;World&quot;</span><br><span class="hljs-keyword">var</span> c <span class="hljs-keyword">bool</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">println</span>(a, b, c)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-2-多变量声明"><a href="#2-1-2-多变量声明" class="headerlink" title="2.1.2 多变量声明"></a>2.1.2 多变量声明</h3><p>第一种，以逗号分隔，声明与赋值分开，若不赋值，存在默认值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> name1, name2, name3 <span class="hljs-keyword">type</span><br>name1, name2, name3 = v1, v2, v3<br></code></pre></td></tr></table></figure><p>第二种，直接赋值，下面的变量类型可以是不同的类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> name1, name2, name3 = v1, v2, v3<br></code></pre></td></tr></table></figure><p>第三种，集合类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>    name1 type1<br>    name2 type2<br>)<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li><p>变量必须先定义才能使用</p></li><li><p>go语言是静态语言，要求变量的类型和赋值的类型必须一致。</p></li><li><p>变量名不能冲突。(同一个作用于域内不能冲突)</p></li><li><p>简短定义方式，左边的变量名至少有一个是新的</p></li><li><p>简短定义方式，不能定义全局变量。</p></li><li><p>变量的零值。也叫默认值。</p></li><li><p>变量定义了就要使用，否则无法通过编译。</p></li></ul><p>如果在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如：a := 20 就是不被允许的，编译器会提示错误 no new variables on left side of :=，但是 a = 20 是可以的，因为这是给相同的变量赋予一个新的值。</p><p>如果你在定义变量 a 之前使用它，则会得到编译错误 undefined: a。如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误，</p><p>在同一个作用域中，已存在同名的变量，则之后的声明初始化，则退化为赋值操作。但这个前提是，最少要有一个新的变量被定义，且在同一作用域，例如，下面的y就是新定义的变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>x := <span class="hljs-number">140</span><br>fmt.Println(&amp;x)<br>x, y := <span class="hljs-number">200</span>, <span class="hljs-string">&quot;abc&quot;</span><br>fmt.Println(&amp;x, x)<br>fmt.Print(y)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-常量"><a href="#2-2-常量" class="headerlink" title="2.2 常量"></a>2.2 常量</h2><h3 id="2-2-1-普通常量"><a href="#2-2-1-普通常量" class="headerlink" title="2.2.1 普通常量"></a>2.2.1 普通常量</h3><p>常量是一个简单值的标识符，在程序运行时，不会被修改的量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> identifier [<span class="hljs-keyword">type</span>] = value<br><span class="hljs-comment">//显式类型定义： </span><br><span class="hljs-keyword">const</span> b <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;abc&quot;</span><br><span class="hljs-comment">//隐式类型定义： </span><br><span class="hljs-keyword">const</span> b = <span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">const</span> LENGTH <span class="hljs-keyword">int</span> = <span class="hljs-number">10</span><br>   <span class="hljs-keyword">const</span> WIDTH <span class="hljs-keyword">int</span> = <span class="hljs-number">5</span>   <br>   <span class="hljs-keyword">var</span> area <span class="hljs-keyword">int</span><br>   <span class="hljs-keyword">const</span> a, b, c = <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;str&quot;</span> <span class="hljs-comment">//多重赋值</span><br><br>   area = LENGTH * WIDTH<br>   fmt.Printf(<span class="hljs-string">&quot;面积为 : %d&quot;</span>, area)<br>   <span class="hljs-built_in">println</span>()<br>   <span class="hljs-built_in">println</span>(a, b, c)   <br>&#125;<br></code></pre></td></tr></table></figure><p>常量可以作为枚举，常量组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    Unknown = <span class="hljs-number">0</span><br>    Female = <span class="hljs-number">1</span><br>    Male = <span class="hljs-number">2</span><br>)<br></code></pre></td></tr></table></figure><p>常量组中如不指定类型和初始化值，则与上一行非空常量右值相同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>x <span class="hljs-keyword">uint16</span> = <span class="hljs-number">16</span><br>y<br>s = <span class="hljs-string">&quot;abc&quot;</span><br>z<br>)<br>fmt.Printf(<span class="hljs-string">&quot;%T,%v\n&quot;</span>, y, y)<br>fmt.Printf(<span class="hljs-string">&quot;%T,%v\n&quot;</span>, z, z)<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项：</p><ul><li><p>常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型</p></li><li><p>不曾使用的常量，在编译的时候，是不会报错的</p></li><li><p>显示指定类型的时候，必须确保常量左右值类型一致，需要时可做显示类型转换。这与变量就不一样了，变量是可以是不同的类型值</p></li></ul><h3 id="2-2-2-iota"><a href="#2-2-2-iota" class="headerlink" title="2.2.2 iota"></a>2.2.2 iota</h3><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量</p><p>iota 可以被用作枚举值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    a = <span class="hljs-literal">iota</span><br>    b = <span class="hljs-literal">iota</span><br>    c = <span class="hljs-literal">iota</span><br>)<br></code></pre></td></tr></table></figure><p>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    a = <span class="hljs-literal">iota</span><br>    b<br>    c<br>)<br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">const</span> (<br>            a = <span class="hljs-literal">iota</span>   <span class="hljs-comment">//0</span><br>            b          <span class="hljs-comment">//1</span><br>            c          <span class="hljs-comment">//2</span><br>            d = <span class="hljs-string">&quot;ha&quot;</span>   <span class="hljs-comment">//独立值，iota += 1</span><br>            e          <span class="hljs-comment">//&quot;ha&quot;   iota += 1</span><br>            f = <span class="hljs-number">100</span>    <span class="hljs-comment">//iota +=1</span><br>            g          <span class="hljs-comment">//100  iota +=1</span><br>            h = <span class="hljs-literal">iota</span>   <span class="hljs-comment">//7,恢复计数</span><br>            i          <span class="hljs-comment">//8</span><br>    )<br>    fmt.Println(a,b,c,d,e,f,g,h,i)<br>&#125;<br></code></pre></td></tr></table></figure><p>如果中断iota自增，则必须显式恢复。且后续自增值按行序递增</p><p>自增默认是int类型，可以自行进行显示指定类型</p><p>数字常量不会分配存储空间，无须像变量那样通过内存寻址来取值，因此无法获取地址</p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>beginners</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang小白入门1 环境配置</title>
    <link href="/2021/02/11/golang%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A81-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/02/11/golang%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A81-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="golang小白入门1"><a href="#golang小白入门1" class="headerlink" title="golang小白入门1"></a>golang小白入门1</h1><p>摘要：环境搭建（m1 mac air）；IDE（jetbrain golang）；最终目标为web开发</p><h2 id="1-1、golang安装包"><a href="#1-1、golang安装包" class="headerlink" title="1.1、golang安装包"></a>1.1、golang安装包</h2><p>截至2021年2月11日，golang稳定版仍未支持</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210211121740020.png" alt="image-20210211121740020"></p><p>请注意，目前只有go1.16rc1非稳定版支持m1 mac</p><p>下载之后一路默认安装即可。</p><h2 id="1-2-jetbrains-golang-IDE"><a href="#1-2-jetbrains-golang-IDE" class="headerlink" title="1.2 jetbrains golang IDE"></a>1.2 jetbrains golang IDE</h2><p>登陆jetbrain官网找到golangIDE</p><p>链接:</p><p><a href="https://www.jetbrains.com/go/">https://www.jetbrains.com/go/</a></p><p>下载安装一路默认，目前goland支持m1芯片，注意下载时选对架构：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210211122130216.png" alt="image-20210211122130216"></p><p>下载安装一路默认。</p><h2 id="1-3-golang环境变量配置"><a href="#1-3-golang环境变量配置" class="headerlink" title="1.3 golang环境变量配置"></a>1.3 golang环境变量配置</h2><p>在macOS中共有四个可选的终端配置文件(主目录～下，没有的话自己创建一个即可)：</p><ul><li>.bashrc</li><li>.bash_profile</li><li>.profile</li><li>.zshrc</li></ul><p>在任意一个文件里编辑都有相同的效果，这里以<code>.zshrc</code>文件为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GOROOT=/usr/<span class="hljs-built_in">local</span>/go<br><span class="hljs-built_in">export</span> GOPATH=/Users/guoxufeng/go<br><span class="hljs-built_in">export</span> GOBIN=<span class="hljs-variable">$GOROOT</span>/bin<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOBIN</span><br></code></pre></td></tr></table></figure><p>之后在主目录～的终端下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> .zshrc<br></code></pre></td></tr></table></figure><p>来执行刷新文件的命令，以后就可以在终端里的任意位置执行go命令。</p><h2 id="1-4-goland-IDE配置"><a href="#1-4-goland-IDE配置" class="headerlink" title="1.4 goland IDE配置"></a>1.4 goland IDE配置</h2><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210211122839397.png" alt="image-20210211122839397"></p><p>点击配置</p><p>在gopath中配置项目目录：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210211123009882.png" alt="image-20210211123009882"></p><p>这里要注意新建go语言项目的时候推荐直接在<code>GOPATH/src</code>下新建项目。如果提示没有权限那就手动在<code>GOPATH/src</code>下新建对应文件夹即可。</p><h2 id="1-5-教程推荐"><a href="#1-5-教程推荐" class="headerlink" title="1.5 教程推荐"></a>1.5 教程推荐</h2><p>在知乎上转了转，目前比较全的golang教程链接如下：</p><p><a href="https://github.com/rubyhan1314/Golang-100-Days">https://github.com/rubyhan1314/Golang-100-Days</a></p><p>但是最新更新也是一年以前，如果大家有比较新的免费教程，请在评论区留言。</p><p>当然，golang官方教程也是很推荐的。</p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>beginners</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TexStudio 论文排版细节</title>
    <link href="/2020/12/25/TexStudio-%E8%AE%BA%E6%96%87%E6%8E%92%E7%89%88%E7%BB%86%E8%8A%82/"/>
    <url>/2020/12/25/TexStudio-%E8%AE%BA%E6%96%87%E6%8E%92%E7%89%88%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h1 id="TexStudio论文排版细节"><a href="#TexStudio论文排版细节" class="headerlink" title="TexStudio论文排版细节"></a>TexStudio论文排版细节</h1><h1 id="Figure"><a href="#Figure" class="headerlink" title="Figure"></a>Figure</h1><p>1、自定义图片标签</p><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20210420224020819.png" alt="image-20210420224020819"></p><p>使用命令：</p><p>注意，需要在最前面的 <code>\begin&#123;document&#125;</code>之前加入以下代码：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\figuretag</span>&#125;[1]&#123;<span class="hljs-comment">%</span><br>  <span class="hljs-keyword">\addtocounter</span>&#123;figure&#125;&#123;-1&#125;<span class="hljs-comment">%</span><br>  <span class="hljs-keyword">\renewcommand</span>&#123;<span class="hljs-keyword">\thefigure</span>&#125;&#123;<span class="hljs-params">#1</span>&#125;<span class="hljs-comment">%</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在插图时使用：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;figure&#125;[ht]<br><br><span class="hljs-keyword">\centering</span><br><span class="hljs-keyword">\includegraphics</span>[scale=0.5]&#123;./Images/Bessel.png&#125;<br><span class="hljs-keyword">\figuretag</span>&#123;1.6-1&#125;<span class="hljs-keyword">\caption</span>&#123;The correlation between outdated and real-time CSI verse relative speed.&#125;<br><span class="hljs-keyword">\label</span>&#123;fig:trajactory&#125;<br><span class="hljs-keyword">\end</span>&#123;figure&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>paper</category>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>IEEE</tag>
      
      <tag>TexStudio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TexStudio论文写作小白入门</title>
    <link href="/2020/12/24/TexStudio%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A8/"/>
    <url>/2020/12/24/TexStudio%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><h2 id="我的个人博客"><a href="#我的个人博客" class="headerlink" title="我的个人博客"></a><a href="https://brook1711.com/2020/12/24/TexStudio%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A8/">我的个人博客</a></h2><h2 id="我的CSDN"><a href="#我的CSDN" class="headerlink" title="我的CSDN"></a><a href="https://blog.csdn.net/weixin_42242398/article/details/111670612">我的CSDN</a></h2><h2 id="我的github"><a href="#我的github" class="headerlink" title="我的github"></a><a href="https://github.com/Brook1711">我的github</a></h2><h1 id="TexStudio论文写作小白入门"><a href="#TexStudio论文写作小白入门" class="headerlink" title="TexStudio论文写作小白入门"></a>TexStudio论文写作小白入门</h1><p>博主今年大四，由于直博的原因希望尽早开始写论文，作为一名小白希望把这个过程记录下来并希望对后人有所帮助。</p><p>博主专业通信工程，未来几年基本都会在IEEE电气电子工程师学会发文</p><h2 id="0、下载安装TexStudio和MikTex"><a href="#0、下载安装TexStudio和MikTex" class="headerlink" title="0、下载安装TexStudio和MikTex"></a>0、下载安装TexStudio和MikTex</h2><p>TexStudio下载地址</p><p><a href="https://www.texstudio.org/">https://www.texstudio.org/</a></p><p>MikTex下载地址</p><p><a href="https://miktex.org/">https://miktex.org/</a></p><p>两个软件都是直接下载安装一路默认就可以</p><h2 id="1、确定发稿类型"><a href="#1、确定发稿类型" class="headerlink" title="1、确定发稿类型"></a>1、确定发稿类型</h2><p>IEEE一般会有以下几种论文类型：</p><p><strong>Transactions</strong> （学报，主要为高水平技术类文章）</p><p>IEEE Transactions on Wireless Communications (TWC)</p><p>IEEE Transactions on Communications (TCOM)</p><p>IEEE Transactions on Signal Processing (TSP) </p><p>IEEE Transactions on Vehicular Technology (TVT)</p><p>（P.S.: TWC和TCOM是通信界公认的顶级期刊，TSP是信号处理界公认的顶级期刊。因为我们做RIS，所以TSP也要关注。上面所列举的Trans.类的期刊虽然都是二区，但都是公认的质量很高的期刊，比下面列举的一些journal / letter质量更高一些。所以Trans.也是我们需要重点阅读的期刊。）</p><p><strong>Journal</strong> （期刊，技术类+综述类文章，多以技术类文章为主）</p><p>IEEE Journal on Selected Areas in Communications (JSAC)</p><p>IEEE Journal of Selected Topics in Signal Processing (JSTSP)</p><p>IEEE Internet of Things Journal (JIOT)</p><p>IEEE Systems Journal (SJ)</p><p>（P.S.: JSAC是需要重点关注的期刊，无论是影响因子还是文章质量，都是通信界公认的顶级期刊，内容涵盖也很广。JSTSP是信号处理类的专刊，文章质量也很高。剩下两个关注一下即可。）</p><p><strong>Letter</strong> （快报，文章短不超过5页，特点是文章的idea很新，发表速度相比Trans.快。所以很多人先在Letter上发表一个创新点，工作可以不用那么完整，之后再在Trans.上发表详细的技术内容。）</p><p>IEEE Wireless Communications Letters (WCL)</p><p>IEEE Communications Letters (CL)</p><p>IEEE Signal Processing Letters (SPL)</p><p><strong>Magazine</strong> （杂志，综述类文章。特点是影响因子高。面向群体为大众而非专业人员，所以公式推导较少。）</p><p>IEEE Communications Magazine</p><p>IEEE Wireless Communications</p><p>Proceedings of the IEEE</p><p>IEEE Vehicular Technology Magazine</p><p>IEEE Network</p><p>如果想查某个期刊的影响因子以及具体分区可以在这个网站上查找：</p><p><a href="http://www.letpub.com.cn/index.php?page=journalapp">http://www.letpub.com.cn/index.php?page=journalapp</a></p><p><strong>相关会议</strong></p><p>（P.S.: <strong>会议论文不应当作为我们的重点阅读对象**</strong>。**因为会议论文较短，即便是顶级会议录用的paper，质量也是参差不齐的，所以我们作为一个参考就行，对于文章质量的好坏应该有一个自己的评判。这里我列出一些顶级会议和权威会议，都是通信业界公认的一些会议。因为通信会议实在太多了，其他很多会议我们无需关注，只看最好的即可。）</p><p>GlobeCom (IEEE Global Communications Conference)</p><p>ICC (IEEE International Conference on Communications)</p><p>ICASSP (IEEE International Conference on Acoustics, Speech and Signal Processing)</p><p>SPAWC (IEEE International Workshop on Signal Processing Advances in Wireless Communications)</p><p>WCNC (IEEE Wireless Communications and Networking Conference)</p><p>PIMRC (International Symposium on Personal, Indoor and Mobile Radio Communications)</p><p>VTC (Vehicular Technology Conference)</p><p>（上面这几个会议GlobeCom≈ICC&gt;WCNC≈PIMRC≈VTC；ICASSP和SPAWC是信号处理类的顶会，质量约等于ICC。）</p><h2 id="2、在官网下载论文模板"><a href="#2、在官网下载论文模板" class="headerlink" title="2、在官网下载论文模板"></a>2、在官网下载论文模板</h2><p>模板可以在IEEE官网找到：</p><p><a href="https://template-selector.ieee.org/secure/templateSelector/publicationType">https://template-selector.ieee.org/secure/templateSelector/publicationType</a></p><h3 id="2-1-选择出版物类型"><a href="#2-1-选择出版物类型" class="headerlink" title="2.1 选择出版物类型"></a>2.1 选择出版物类型</h3><p>我这里选择的是Letter：</p><p><img src="https://cdn.jsdelivr.net/gh/brook1711/fig_for_blog@master/img/image-20201224204337680.png" alt="image-20201224204337680"></p><h3 id="2-2-选择出版物"><a href="#2-2-选择出版物" class="headerlink" title="2.2 选择出版物"></a>2.2 选择出版物</h3><p>我这里选择的是wireless communication Letters</p><p><img src="https://cdn.jsdelivr.net/gh/brook1711/fig_for_blog@master/img/image-20201224204323411.png" alt="image-20201224204323411"></p><h3 id="2-3-选择文章类型"><a href="#2-3-选择文章类型" class="headerlink" title="2.3 选择文章类型"></a>2.3 选择文章类型</h3><p>Letters只有一个选项</p><p><img src="https://cdn.jsdelivr.net/gh/brook1711/fig_for_blog@master/img/image-20201224204027677.png" alt="image-20201224204027677"></p><h3 id="2-4-选择模板格式"><a href="#2-4-选择模板格式" class="headerlink" title="2.4 选择模板格式"></a>2.4 选择模板格式</h3><p>这里选择LaTex</p><p><img src="https://cdn.jsdelivr.net/gh/brook1711/fig_for_blog@master/img/image-20201224204013473.png" alt="image-20201224204013473"></p><h3 id="2-5-下载模板"><a href="#2-5-下载模板" class="headerlink" title="2.5 下载模板"></a>2.5 下载模板</h3><p>全部选择完成后就可以看到你想要的下载按钮了</p><p><img src="https://cdn.jsdelivr.net/gh/brook1711/fig_for_blog@master/img/image-20201224204002146.png" alt="image-20201224204002146"></p><h2 id="3、使用TexStudio打开下载的模板"><a href="#3、使用TexStudio打开下载的模板" class="headerlink" title="3、使用TexStudio打开下载的模板"></a>3、使用TexStudio打开下载的模板</h2><p>在压缩包的如下路径中可以找到：</p><p>bare_jrnl.tex文件，这就是我们需要的模板</p><p><img src="https://cdn.jsdelivr.net/gh/brook1711/fig_for_blog@master/img/image-20201224204506130.png" alt="image-20201224204506130"></p><p>右键通过TexStudio打开</p><p>点击左上角编译键编译</p><p><img src="https://cdn.jsdelivr.net/gh/brook1711/fig_for_blog@master/img/image-20201224204525145.png" alt="image-20201224204525145"></p><p>就可以看到代码实现的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/brook1711/fig_for_blog@master/img/20201225121412.png" alt="image-20201224204601627"></p><p>这时文档是双栏的，但是在投稿时经常会要求单栏，那么在代码的最上方插入代码：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>[12pt, draftclsnofoot, onecolumn]&#123;IEEEtran&#125;<br></code></pre></td></tr></table></figure><p>即可转换为单栏视图</p><p><img src="https://cdn.jsdelivr.net/gh/brook1711/fig_for_blog@master/img/20201224204856.png" alt="20201224204856.png"></p><h2 id="具体投稿格式（WCL）"><a href="#具体投稿格式（WCL）" class="headerlink" title="具体投稿格式（WCL）"></a>具体投稿格式（WCL）</h2><p><a href="https://www.comsoc.org/publications/journals/ieee-wcl/ieee-wireless-communications-letters-submit-manuscript">https://www.comsoc.org/publications/journals/ieee-wcl/ieee-wireless-communications-letters-submit-manuscript</a></p><p><img src="https://cdn.jsdelivr.net/gh/brook1711/fig_for_blog@master/img/image-20201224205317041.png" alt="image-20201224205317041"></p>]]></content>
    
    
    <categories>
      
      <category>paper</category>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>IEEE</tag>
      
      <tag>TexStudio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 插件，介绍本博客使用插件</title>
    <link href="/2020/12/18/Hexo-%E6%8F%92%E4%BB%B6%EF%BC%8C-%E4%BB%8B%E7%BB%8D%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <url>/2020/12/18/Hexo-%E6%8F%92%E4%BB%B6%EF%BC%8C-%E4%BB%8B%E7%BB%8D%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>盘点本博客使用的插件</p><h1 id="1、加密文章或页面"><a href="#1、加密文章或页面" class="headerlink" title="1、加密文章或页面"></a>1、加密文章或页面</h1><a class="btn" href="https://github.com/D0n9X1n/hexo-blog-encrypt"  title="插件GitHub仓库地址" target="_blank">hexo-blog-encrypt</a><p>加入方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-blog-encrypt<br></code></pre></td></tr></table></figure><p>输入命令行直接安装包</p><p>使用时直接在<code>/source/_post/*.md</code>文件头部加入：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: Hello World<br>date: 2016-03-30 21:18:02<br>password: mikemessi<br>abstract: Here&#x27;s something encrypted, password is required to continue reading.<br>message: Hey, password is required here.<br>wrong<span class="hljs-emphasis">_pass_</span>message: Oh, this is an invalid password. Check and try again, please.<br>wrong<span class="hljs-emphasis">_hash_</span>message: Oh, these decrypted content cannot be verified, but you can still have a look.<br>---<br></code></pre></td></tr></table></figure><p>password字段即为加密该post页面的密码</p><p>abstract为出入密码框中的默认字段</p><p>wrong_pass_message和wrong_hash_message字段为错误提示字段</p><p>最终效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201218214642666.png" alt="image-20201218214642666"></p><h1 id="2、看板娘"><a href="#2、看板娘" class="headerlink" title="2、看板娘"></a>2、看板娘</h1><a class="btn" href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md"  title="插件GitHub仓库地址" target="_blank">hexo-helper-live2d</a><p>加入方法：（具体方法在上面👆的链接中）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure><p>首先安装包</p><p>在<code>/_config.fluid.yml</code>或<code>/_config.yml</code>中添加以下设置：</p><p>在这里我配置的是<code>/_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">live2d:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span><br>  <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span><br>  <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span><br>  <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span><br>  <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-wanko</span><br>  <span class="hljs-attr">display:</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">150</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">300</span><br>  <span class="hljs-attr">mobile:</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">react:</span><br>    <span class="hljs-attr">opacity:</span> <span class="hljs-number">0.7</span><br></code></pre></td></tr></table></figure><p>除了有看板娘这一模板之外，还有很多好看的models供你选择</p><a class="btn" href="https://github.com/xiazeyu/live2d-widget-models"  title="model 仓库 GitHub仓库地址" target="_blank">live2d-widget-models</a><p>目前仓库中有如下的模型。</p><p>更换模型只需要更改上述代码块中的如下字段：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">live2d:</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-wanko</span><br></code></pre></td></tr></table></figure><p><a href="https://huaji8.top/post/live2d-plugin-2.0/">https://huaji8.top/post/live2d-plugin-2.0/</a></p><a class="btn" href="https://huaji8.top/post/live2d-plugin-2.0/"  title="预览图展示地址地址" target="_blank">各插件预览图</a><blockquote><ul><li><code>live2d-widget-model-chitose</code></li><li><code>live2d-widget-model-epsilon2_1</code></li><li><code>live2d-widget-model-gf</code></li><li><code>live2d-widget-model-haru/01</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li><li><code>live2d-widget-model-haru/02</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li><li><code>live2d-widget-model-haruto</code></li><li><code>live2d-widget-model-hibiki</code></li><li><code>live2d-widget-model-hijiki</code></li><li><code>live2d-widget-model-izumi</code></li><li><code>live2d-widget-model-koharu</code></li><li><code>live2d-widget-model-miku</code></li><li><code>live2d-widget-model-ni-j</code></li><li><code>live2d-widget-model-nico</code></li><li><code>live2d-widget-model-nietzsche</code></li><li><code>live2d-widget-model-nipsilon</code></li><li><code>live2d-widget-model-nito</code></li><li><code>live2d-widget-model-shizuku</code></li><li><code>live2d-widget-model-tororo</code></li><li><code>live2d-widget-model-tsumiki</code></li><li><code>live2d-widget-model-unitychan</code></li><li><code>live2d-widget-model-wanko</code></li><li><code>live2d-widget-model-z16</code></li></ul></blockquote><p>效果预览：</p><p>请见本博客右下角的可爱宝宝</p><p>:)</p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>plug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo fluid主题中开启评论的具体方法</title>
    <link href="/2020/12/18/hexo-fluid%E4%B8%BB%E9%A2%98%E4%B8%AD%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E7%9A%84%E5%85%B7%E4%BD%93%E6%96%B9%E6%B3%95/"/>
    <url>/2020/12/18/hexo-fluid%E4%B8%BB%E9%A2%98%E4%B8%AD%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E7%9A%84%E5%85%B7%E4%BD%93%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>目标：在基于hexo的fluid主题中加入评论模块<br>参考fluid官方中文文档：<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%AF%84%E8%AE%BA">https://hexo.fluid-dev.com/docs/guide/#%E8%AF%84%E8%AE%BA</a></p><h2 id="1、修改主题配置：在根目录下的-config-fluid-yml文件"><a href="#1、修改主题配置：在根目录下的-config-fluid-yml文件" class="headerlink" title="1、修改主题配置：在根目录下的_config.fluid.yml文件"></a>1、修改<strong>主题配置</strong>：在根目录下的<code>_config.fluid.yml</code>文件</h2><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201218120752877.png" alt="image-20201218120752877"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">gitalk</span><br></code></pre></td></tr></table></figure><p>type中可选评论插件种类：</p><p>utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo</p><p>disqus会被墙所以我选择gitalk</p><p>选取种类之后需要对对应的插件进行设置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">clientID:</span><br>  <span class="hljs-attr">clientSecret:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">owner:</span><br>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;name&#x27;</span>]<br>  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]<br>  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span><br>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>对应的属性之后都会修改</p><h2 id="2、在github中创建应用"><a href="#2、在github中创建应用" class="headerlink" title="2、在github中创建应用"></a>2、在github中创建应用</h2><p>点击链接创建应用</p><p><a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a></p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201218122310526.png" alt="image-20201218122310526"></p><p>参数说明：</p><blockquote><p>Application name： 应用名称，随意<br>Homepage URL： 网站URL，对应自己博客地址<br>Application description ：描述，随意<br>Authorization callback URL：# 网站URL，博客地址就好</p></blockquote><p>注册完成之后会看到</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201218122825599.png" alt="image-20201218122825599"></p><p>将ID和secret填进以下区域</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">clientID:</span><br>  <span class="hljs-attr">clientSecret:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">owner:</span><br>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;name&#x27;</span>]<br>  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]<br>  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span><br>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201218125523775.png" alt="image-20201218125523775"></p><p>注意attention！！！</p><p>1、repo: 中填写的是仓库名，就是你初始化博客用的仓库</p><p>（该仓库必须<strong>公开</strong>！！）</p><p>2、owner 中的用户名不能有引号</p><p>3、distractionFreeMode建议开启false，必须登录GitHub才能评论</p><h2 id="最终效果："><a href="#最终效果：" class="headerlink" title="最终效果："></a>最终效果：</h2><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201218125838680.png" alt="image-20201218125838680"></p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>comments</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo fluid 中关联 Google Anlytics 的具体方法</title>
    <link href="/2020/12/17/fluid%E4%B8%AD%E5%85%B3%E8%81%94-Google-Anlytics-%E7%9A%84%E5%85%B7%E4%BD%93%E6%96%B9%E6%B3%95/"/>
    <url>/2020/12/17/fluid%E4%B8%AD%E5%85%B3%E8%81%94-Google-Anlytics-%E7%9A%84%E5%85%B7%E4%BD%93%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://brook1711.com/2020/12/17/fluid%E4%B8%AD%E5%85%B3%E8%81%94-Google-Anlytics-%E7%9A%84%E5%85%B7%E4%BD%93%E6%96%B9%E6%B3%95/">我的个人博客</a><br><a href="https://zhuanlan.zhihu.com/p/338903685">我的知乎</a><br><a href="https://blog.csdn.net/weixin_42242398/article/details/111573933">我的CSDN</a></p><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/20201217222130.png" alt=""></p><p>同时在安卓和ios端也有客户端软件，非常的方便</p><p>自己的博客总是要有查看访问量和访客情况的需求，由于我的博客是基于Hexo fluid的主题，该主题有绑定Google analytics的接口，Google analytics是比较好用的网页数据可视化工具，你可以看到访客的访问地理分布、时间分布等等</p><h2 id="1、注册Google-analytics-账号"><a href="#1、注册Google-analytics-账号" class="headerlink" title="1、注册Google analytics 账号"></a>1、注册Google analytics 账号</h2><p>（在自己的google 账号中将语言设置尽可能改成英文，方便查找外网资料）</p><a class="btn" href="https://analytics.google.com/analytics/web/#/"  title="Google analytics 网址" target="_blank">Google analytics</a><h2 id="2、根据图示一步步往下走"><a href="#2、根据图示一步步往下走" class="headerlink" title="2、根据图示一步步往下走"></a>2、根据图示一步步往下走</h2><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/20201217223158.png" alt=""></p><p>创建数据流业务的时候一定<strong>注意</strong>！！！！！</p><p>勾选UA服务</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201217224042636.png" alt="image-20201217224042636"></p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201217223418798.png" alt="image-20201217223418798"></p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201217223513965.png" alt="image-20201217223513965"></p><p>然后蓝色按钮创建</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201217223606076.png" alt="image-20201217223606076"></p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201217223731930.png" alt="image-20201217223731930"></p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201217224157471.png" alt="image-20201217224157471"></p><h2 id="3、更改fluid代码设置："><a href="#3、更改fluid代码设置：" class="headerlink" title="3、更改fluid代码设置："></a>3、更改fluid代码设置：</h2><p>在配置文件<code>_config.fluid.yml</code>中更改以下设置：</p><p>关于fluid主题的配置可参见其<a href="https://hexo.fluid-dev.com/docs/guide/#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81">官方文档</a></p><p>enable 改为 true</p><p>google 改为 tracking ID</p><p>gtag 改为 MEASUREMENT ID</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串</span><br>  <span class="hljs-comment"># Baidu analytics, get the string behind `hm.js?`</span><br>  <span class="hljs-comment"># See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376</span><br>  <span class="hljs-attr">baidu:</span><br><br>  <span class="hljs-comment"># Google 统计的 Tracking ID</span><br>  <span class="hljs-comment"># Google analytics, set Tracking ID</span><br>  <span class="hljs-comment"># See: https://developers.google.com/analytics/devguides/collection/analyticsjs</span><br>  <span class="hljs-attr">google:</span> <span class="hljs-string">UA-xxxxxx-1</span><br><br>  <span class="hljs-comment"># Google gtag.js 的媒体资源 ID</span><br>  <span class="hljs-comment"># Google gtag.js GA_MEASUREMENT_ID</span><br>  <span class="hljs-comment"># See: https://developers.google.com/analytics/devguides/collection/gtagjs/</span><br>  <span class="hljs-attr">gtag:</span> <span class="hljs-string">G-xxxxxx</span><br><br>  <span class="hljs-comment"># 腾讯统计的 H5 App ID，开启高级功能才有cid</span><br>  <span class="hljs-comment"># Tencent analytics, set APP ID</span><br>  <span class="hljs-comment"># See: https://mta.qq.com/h5/manage/ctr_app_manage</span><br>  <span class="hljs-attr">tencent:</span><br>    <span class="hljs-attr">sid:</span><br>    <span class="hljs-attr">cid:</span><br><br>  <span class="hljs-comment"># 51.la 站点统计 ID</span><br>  <span class="hljs-comment"># 51.la analytics</span><br>  <span class="hljs-comment"># See: https://www.51.la/user/site/index</span><br>  <span class="hljs-attr">woyaola:</span>  <span class="hljs-comment"># 51.la 站点统计 ID，参见</span><br><br>  <span class="hljs-comment"># 友盟/cnzz 站点统计 web_id</span><br>  <span class="hljs-comment"># cnzz analytics</span><br>  <span class="hljs-comment"># See: https://web.umeng.com/main.php?c=site&amp;a=show</span><br>  <span class="hljs-attr">cnzz:</span><br><br>  <span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span><br>  <span class="hljs-comment"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span><br><br></code></pre></td></tr></table></figure><h2 id="4、验证效果"><a href="#4、验证效果" class="headerlink" title="4、验证效果"></a>4、验证效果</h2><p>进入控制台中的数据流概览：</p><p><img src="https://cdn.jsdelivr.net/gh/Brook1711/fig_for_blog/img/image-20201217224601115.png" alt="image-20201217224601115"></p><p>最终可以看到结果</p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>Google Anlytics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>first_post</title>
    <link href="/2020/12/17/first-post/"/>
    <url>/2020/12/17/first-post/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="223dfa3c002bb9f36aab3ffd5ff2cbf6f3a74658c2bb3f8f7f4461cbae864827">014a3507a62a5f9a80763c118325443fecb8ef014b088e928e6a64fc90fc3d2bc9d09aefe89f3d3b0067496f917f7a013cdf147aa1d589052c38c5811e25a1fdab17d9a08356c85b8023d81d7d25ba7e141b795a13dafc9f88e9d5438119f8252f39d5947a20cc602a2d7c216a6ba4104521477e4c60d74682bb0373f73f4eae23af7c65df165148fecbbcc4f9516c06560c3d4765f758e26070dce316a6fbb7ed1f307e5a086e7d0f1b60cdf83b4d8d7a3f4fa74217c142ed6d331945d4915ac51d9168b7a0c22c84068e192047b48e178411162e56e4462d4526dc165209c71b162e31cba58824d111f4c79e5fde90ac622e373065dc3a8f9e34146e5ce8812603964c513893378a243a931c006e9d129d31d21b03b5c77d7cd6eaf30c231abbac7bc37d18c70ea868dde68c6ad92b221379b5c17bc55a3d77a505a94480efc6b115afde160913cf4642cffba2f5b448e0d2a6826a055e97f8717bfb9c32888d7c55a7a18657992ba7d18c1b6a1f83543650f02d8fb70dcbce7e4e1edf410bbde348275fac8ea08c330634280be3a44ac1a9a49e0e35db25975388635f4726d1e97030eb529e9c490ffe942b2c4ee3bcfa1e6f4097950c3669bde62452df56d84bdf17d8d86bd8d89370a9e39bc94bfb7524a9f705ad6fedd8165ce8763c52ffa3fea50e3c6e7dcef7f90fa511ab49b9e440d18405f5f1fb8c64fe49c647b49a45d692c9921ce3c04838dd9a4e0a652aa9f3b8200bb54b2a308f383eff9c030968bd02ad883d7dc140b8b52c2fc1acf16f521482dee069fb90a61c0946c13ba6fee41817dfa9d1ee142bacb5b469e3ebdb044b51a15cc4ae438d09e58bc468659f0d7b64f1e371e2502f23133f9cc80f42b09c4207a0321f70e43673082b83d30bc4cfae1eae31f512d3235d23d71600c4a1cfb476d58f92ac7048b878dc6b068b513475788e028b1e5a9cc62e97126faf0f20be7715ba654534046b2743b289960e2839f219e1ad249cab15b885642f478fcb717a0e3f030189520895a4be748ad3e975d9761fab94070f35188c4ef85374d9748e042fdeca75d539e3ef9bb29b4f2829ba7783c2a27444156825f5f16cbdc8ca89302c44dacb00f322c0c5e86d1ae15d7dd9d310273d4be0c62ff211e8461e8391908cc7481e88279c255a0bfdcf90bd5bf2666caa0028bd6aaa630e8fd3cd51163cfbbe334c6748ed7fc940bf204b9deb631be5cf57bf77a43168fbb99e934417189f3930a1b602827f881480e8942212d0e94edcea119c1e3ef1116c6b72a377d592da7a7165ed857c348bb565f895dc5bf18da044d0f637c3a2b70c5337824dc5267e57abfee0d1d781771dff8e2845f677038048cec301f653faee7af924f920189051c093280c393172c7567ef01dce898941a15564aa8d86df061cffb793e546bc756b547263f3189412a8f2963cbd24ccea5577b8d5039e</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>example</category>
      
      <category>start</category>
      
    </categories>
    
    
    <tags>
      
      <tag>first</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
